"""
Setup cog for configuring the Ninis server.
"""
import asyncio
import logging
import discord
from discord.ext import commands
import config
import random
import string
import json
import os
from datetime import datetime

# Set up logging
logger = logging.getLogger('ninis_bot')

class Setup(commands.Cog):
    """Commands for setting up and managing server structure."""
    
    def __init__(self, bot):
        self.bot = bot
        
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Attribue automatiquement le r√¥le 'Non v√©rifi√©' aux nouveaux membres."""
        guild = member.guild
        
        # Trouver le r√¥le "Non v√©rifi√©"
        unverified_role = discord.utils.get(guild.roles, name="Non v√©rifi√©")
        
        if unverified_role:
            try:
                await member.add_roles(unverified_role)
                logger.info(f"R√¥le 'Non v√©rifi√©' attribu√© automatiquement √† {member.name}")
                
                # Envoyer un message de bienvenue au nouveau membre
                try:
                    welcome_dm = discord.Embed(
                        title="‚ú® Bienvenue sur Ninis ! ‚ú®",
                        description=f"Bonjour {member.mention} !\n\n"
                                   f"Pour acc√©der √† tous les salons du serveur, tu dois d'abord accepter le r√®glement en cliquant sur la r√©action ‚úÖ dans le salon <#üìñ„Éªr√®glement>.",
                        color=discord.Colour.pink()
                    )
                    welcome_dm.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
                    
                    await member.send(embed=welcome_dm)
                except Exception as e:
                    logger.error(f"Impossible d'envoyer un DM √† {member.name}: {e}")
            except Exception as e:
                logger.error(f"Erreur lors de l'attribution du r√¥le 'Non v√©rifi√©' √† {member.name}: {e}")
        
        # Chargement des donn√©es des r√®gles
        try:
            import json
            import os
            
            if os.path.exists('rules_data.json'):
                with open('rules_data.json', 'r') as f:
                    rules_data = json.load(f)
                    
                    # Mise √† jour des variables globales
                    config.RULES_MESSAGE_ID = rules_data.get("rules_message_id")
                    config.RULES_CHANNEL_ID = rules_data.get("rules_channel_id")
                    
                    logger.info(f"Donn√©es de r√®glement charg√©es: Message ID: {config.RULES_MESSAGE_ID}, Canal ID: {config.RULES_CHANNEL_ID}")
            else:
                logger.info("Aucun fichier rules_data.json trouv√©, les IDs de r√®glement seront d√©finis lors de la premi√®re utilisation")
        except Exception as e:
            logger.error(f"Erreur lors du chargement des donn√©es de r√®glement: {e}")
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_ninis(self, ctx):
        """Set up the Ninis server with predefined roles, categories and channels."""
        guild = ctx.guild
        
        # Show setup confirmation message
        confirm_embed = discord.Embed(
            title="Configuration du serveur Ninis",
            description="Ce processus va cr√©er tous les r√¥les, cat√©gories et salons n√©cessaires pour le serveur Ninis.\n"
                        "**Attention:** Cette action va potentiellement cr√©er de nombreux √©l√©ments sur ton serveur.",
            color=discord.Colour.yellow()
        )
        confirm_embed.add_field(name="Continuer ?", value="R√©ponds avec `oui` pour continuer ou `non` pour annuler.")
        
        await ctx.send(embed=confirm_embed)
        
        # Wait for confirmation
        try:
            def check(message):
                return message.author == ctx.author and message.channel == ctx.channel and \
                       message.content.lower() in ["oui", "non"]
            
            response = await self.bot.wait_for('message', check=check, timeout=30.0)
            
            if response.content.lower() == "non":
                await ctx.send("‚ùå Configuration annul√©e.")
                return
            
        except asyncio.TimeoutError:
            await ctx.send("‚è±Ô∏è D√©lai d'attente expir√©. Configuration annul√©e.")
            return
        
        # Start setup with progress message
        progress_message = await ctx.send("‚è≥ Configuration en cours...")
        
        # Setup progress tracking
        total_steps = len(config.ROLES) + len(config.CHANNELS)
        current_step = 0
        
        async def update_progress():
            nonlocal current_step
            current_step += 1
            progress = int((current_step / total_steps) * 100)
            await progress_message.edit(content=f"‚è≥ Configuration en cours... ({progress}% termin√©)")
        
        # Create roles
        try:
            await self._create_roles(guild, update_progress)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des r√¥les: {e}")
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation des r√¥les: {e}")
            return
        
        # Create channels
        try:
            await self._create_channels(guild, update_progress)
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des salons: {e}")
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation des salons: {e}")
            return
        
        # Finish setup
        await progress_message.edit(content="‚úÖ Configuration termin√©e avec succ√®s !")
        
        # Send success embed with details
        success_embed = discord.Embed(
            title="‚ú® Serveur Ninis configur√© !",
            description="Tous les √©l√©ments du serveur ont √©t√© cr√©√©s avec succ√®s.",
            color=discord.Colour.green()
        )
        success_embed.add_field(
            name="√âl√©ments cr√©√©s",
            value=f"‚Ä¢ {len(config.ROLES)} r√¥les\n‚Ä¢ {sum(1 for cat in config.CHANNELS for _ in config.CHANNELS[cat])} salons\n‚Ä¢ {len(config.CHANNELS)} cat√©gories",
            inline=False
        )
        success_embed.add_field(
            name="Prochaines √©tapes",
            value="1. V√©rifiez que tous les salons sont correctement configur√©s\n"
                 "2. Personnalisez les permissions des r√¥les si n√©cessaire\n"
                 "3. Ajoutez des emojis personnalis√©s pour am√©liorer l'exp√©rience",
            inline=False
        )
        success_embed.set_footer(text="‚úß Merci d'utiliser le bot Ninis !")
        
        await ctx.send(embed=success_embed)
    
    async def _create_roles(self, guild, update_callback):
        """Create all the roles defined in the config."""
        # Check for existing roles to avoid duplicates
        existing_roles = {role.name: role for role in guild.roles}
        
        for role_name, role_data in config.ROLES.items():
            # Skip if role already exists
            if role_name in existing_roles:
                logger.info(f"Le r√¥le '{role_name}' existe d√©j√†, passage au suivant.")
                await update_callback()
                continue
            
            # Create role with proper permissions
            try:
                permissions = discord.Permissions()
                if role_data["permissions"]:
                    # Staff-level permissions
                    permissions.update(
                        kick_members=True,
                        ban_members=True,
                        manage_messages=True,
                        mute_members=True,
                        deafen_members=True,
                        move_members=True,
                        manage_nicknames=True,
                        manage_channels=True if role_name == "‚ú¶ Íí∞ Nini Queen Íí±" else False,
                        administrator=True if role_name == "‚ú¶ Íí∞ Nini Queen Íí±" else False
                    )
                
                await guild.create_role(
                    name=role_name,
                    colour=discord.Colour(role_data["color"]),
                    permissions=permissions,
                    hoist=True,  # Separate role in member list
                    mentionable=True,
                    reason="Ninis server setup"
                )
                logger.info(f"R√¥le '{role_name}' cr√©√© avec succ√®s")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du r√¥le '{role_name}': {e}")
                raise
            
            # Update progress
            await update_callback()
            
            # Add a small delay to avoid rate limits
            await asyncio.sleep(0.5)
    
    async def _create_channels(self, guild, update_callback):
        """Create all categories and channels defined in the config."""
        # Get existing categories and channels to avoid duplicates
        existing_categories = {category.name: category for category in guild.categories}
        
        # Get roles for permissions
        roles = {role.name: role for role in guild.roles}
        
        # Create each category and its channels
        for category_name, channels in config.CHANNELS.items():
            # Create or get category
            if category_name in existing_categories:
                category = existing_categories[category_name]
                logger.info(f"La cat√©gorie '{category_name}' existe d√©j√†, utilisation de celle-ci.")
            else:
                # Set up permissions for categories
                overwrites = {}
                everyone_role = guild.default_role
                
                # Pour la cat√©gorie Staff, seuls les membres du staff peuvent voir
                if "Staff" in category_name:
                    # Make staff-only channels private
                    overwrites[everyone_role] = discord.PermissionOverwrite(read_messages=False)
                    
                    if "‚ú¶ Íí∞ Nini Queen Íí±" in roles:
                        overwrites[roles["‚ú¶ Íí∞ Nini Queen Íí±"]] = discord.PermissionOverwrite(
                            read_messages=True, send_messages=True)
                    
                    if "‚ô° Staff" in roles:
                        overwrites[roles["‚ô° Staff"]] = discord.PermissionOverwrite(
                            read_messages=True, send_messages=True)
                # Pour toutes les autres cat√©gories, seuls les membres (v√©rifi√©s) peuvent voir
                else:
                    # Par d√©faut, tout le monde ne peut pas voir
                    overwrites[everyone_role] = discord.PermissionOverwrite(read_messages=False)
                    
                    # Les admins et staff peuvent tout voir
                    if "‚ú¶ Íí∞ Nini Queen Íí±" in roles:
                        overwrites[roles["‚ú¶ Íí∞ Nini Queen Íí±"]] = discord.PermissionOverwrite(
                            read_messages=True, send_messages=True)
                    
                    if "‚ô° Staff" in roles:
                        overwrites[roles["‚ô° Staff"]] = discord.PermissionOverwrite(
                            read_messages=True, send_messages=True)
                    
                    # Les membres v√©rifi√©s peuvent voir
                    if "Membre" in roles:
                        overwrites[roles["Membre"]] = discord.PermissionOverwrite(
                            read_messages=True, send_messages=True)
                        
                    # Ceux qui ont le r√¥le "Non v√©rifi√©" ne peuvent pas voir
                    if "Non v√©rifi√©" in roles:
                        overwrites[roles["Non v√©rifi√©"]] = discord.PermissionOverwrite(
                            read_messages=False)
                
                category = await guild.create_category(name=category_name, overwrites=overwrites)
                logger.info(f"Cat√©gorie '{category_name}' cr√©√©e avec succ√®s")
            
            # Create channels in this category
            for channel_name, channel_data in channels.items():
                # Check if channel already exists in this category
                existing_channel = discord.utils.get(
                    category.channels, 
                    name=channel_name.replace("„Éª", "-")  # Discord normalizes the dot
                )
                
                if existing_channel:
                    logger.info(f"Le salon '{channel_name}' existe d√©j√† dans '{category_name}', passage au suivant")
                    continue
                
                try:
                    # Create the channel based on its type
                    channel = None
                    # Configuration personnalis√©e pour le canal des r√®gles
                    if channel_name == "üìñ„Éªr√®glement":
                        # Pour le salon des r√®gles, tout le monde peut le voir (y compris les membres non v√©rifi√©s)
                        rules_overwrites = {}
                        everyone_role = guild.default_role
                        
                        # Tout le monde peut voir le r√®glement
                        rules_overwrites[everyone_role] = discord.PermissionOverwrite(
                            read_messages=True,
                            send_messages=False,  # Mais personne ne peut √©crire
                            read_message_history=True,
                            add_reactions=True
                        )
                        
                        # Staff avec permissions compl√®tes
                        if "‚ú¶ Íí∞ Nini Queen Íí±" in roles:
                            rules_overwrites[roles["‚ú¶ Íí∞ Nini Queen Íí±"]] = discord.PermissionOverwrite(
                                read_messages=True, 
                                send_messages=True,
                                manage_messages=True
                            )
                        
                        if "‚ô° Staff" in roles:
                            rules_overwrites[roles["‚ô° Staff"]] = discord.PermissionOverwrite(
                                read_messages=True, 
                                send_messages=True,
                                manage_messages=True
                            )
                        
                        # Cr√©ation du salon
                        channel = await guild.create_text_channel(
                            name=channel_name,
                            category=category,
                            overwrites=rules_overwrites
                        )
                        logger.info(f"Salon des r√®gles '{channel_name}' cr√©√© avec permissions sp√©ciales")
                    
                    elif channel_data.get("type") == "voice":
                        channel = await guild.create_voice_channel(
                            name=channel_name,
                            category=category
                        )
                    else:  # Default to text channel
                        channel = await guild.create_text_channel(
                            name=channel_name,
                            category=category
                        )
                    
                    # Send default content if specified
                    if "content" in channel_data and channel_data["content"] and isinstance(channel, discord.TextChannel):
                        await channel.send(channel_data["content"])
                    
                    logger.info(f"Salon '{channel_name}' cr√©√© avec succ√®s dans '{category_name}'")
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation du salon '{channel_name}': {e}")
                    raise
                
                # Add a small delay to avoid rate limits
                await asyncio.sleep(0.5)
            
            # Update progress after each category is done
            await update_callback()
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def add_role_menu(self, ctx, channel_id=None):
        """Create or update a role selection menu in the specified channel."""
        # If no channel specified, use the current one or try to find the roles channel
        if channel_id is None:
            # Try to find the roles channel by name
            roles_channel = discord.utils.get(ctx.guild.text_channels, name="‚ú®„Éªr√¥les")
            if roles_channel:
                channel = roles_channel
                logger.info(f"Canal de r√¥les trouv√© automatiquement: {channel.name}")
            else:
                channel = ctx.channel
                logger.info(f"Utilisation du canal actuel pour les r√¥les: {channel.name}")
        else:
            try:
                channel = await self.bot.fetch_channel(int(channel_id))
                logger.info(f"Canal de r√¥les sp√©cifi√© manuellement: {channel.name}")
            except (ValueError, discord.NotFound, discord.Forbidden):
                await ctx.send("‚ùå Salon introuvable. V√©rifie l'ID et mes permissions.")
                return
        
        try:
            # Purge existing messages
            await channel.purge(limit=10)
            logger.info(f"Canal '{channel.name}' nettoy√© pour le nouveau menu de r√¥les")
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage du canal '{channel.name}': {e}")
            await ctx.send(f"‚ö†Ô∏è Je n'ai pas pu nettoyer le canal. Erreur: {e}")
        
        # Create the role menu embed
        embed = discord.Embed(
            title="‚ú® S√©lection de r√¥les",
            description="R√©agis √† ce message pour obtenir les r√¥les correspondants:",
            color=discord.Colour.pink()
        )
        
        # Add role descriptions
        role_descriptions = [
            ("üå∏", "Cr√©atif.ve", "Pour les artistes et cr√©ateurs de tout type"),
            ("‚ú®", "Gamer", "Pour les passionn√©s de jeux vid√©o"),
            ("‚òÅ", "Chillax", "Pour les amoureux de la d√©tente et du calme"),
            ("‚ãÜ", "Baby Nini", "Pour les nouveaux membres de la communaut√©")
        ]
        
        for emoji, role_name, description in role_descriptions:
            embed.add_field(
                name=f"{emoji} {role_name}",
                value=description,
                inline=False
            )
        
        # Send the embed
        menu_message = await channel.send(embed=embed)
        
        # Store the menu message ID in the bot's session data for future reference
        if not hasattr(self, 'role_menu_message_ids'):
            self.role_menu_message_ids = {}
        self.role_menu_message_ids[channel.id] = menu_message.id
        logger.info(f"ID du message du menu de r√¥les enregistr√©: {menu_message.id} dans le canal {channel.id}")
        
        # Add reactions
        for emoji, _, _ in role_descriptions:
            await menu_message.add_reaction(emoji)
            logger.info(f"R√©action {emoji} ajout√©e au menu de r√¥les")
        
        await ctx.send(f"‚úÖ Menu de r√¥les cr√©√© dans <#{channel.id}>")
    
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        """Handle adding roles based on reactions."""
        # Skip if it's the bot's own reaction
        if payload.user_id == self.bot.user.id:
            return
        
        # Get the guild
        guild = self.bot.get_guild(payload.guild_id)
        if not guild:
            return
            
        # Get the channel
        channel = self.bot.get_channel(payload.channel_id)
        if not channel:
            return
            
        # Check if it's the rules channel
        if channel.name == "üìñ„Éªr√®glement" and str(payload.emoji) == "‚úÖ":
            # Handle rules acceptance
            member = guild.get_member(payload.user_id)
            if not member:
                return
                
            # Get unverified role (to remove)
            unverified_role = discord.utils.get(guild.roles, name="Non v√©rifi√©")
                
            # Get or create member role (to add)
            member_role = discord.utils.get(guild.roles, name="Membre")
            if not member_role:
                # Role doesn't exist, create it
                try:
                    permissions = discord.Permissions()
                    permissions.update(
                        read_messages=True,
                        send_messages=True,
                        read_message_history=True,
                        add_reactions=True,
                        connect=True,
                        speak=True
                    )
                    
                    member_role = await guild.create_role(
                        name="Membre",
                        colour=discord.Colour(0x3498DB),  # Bleu
                        permissions=permissions,
                        hoist=True,
                        mentionable=True,
                        reason="R√¥le pour les membres ayant accept√© le r√®glement"
                    )
                    logger.info(f"R√¥le 'Membre' cr√©√© pour les membres v√©rifi√©s")
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation du r√¥le 'Membre': {e}")
                    return
            
            # Process roles
            try:
                # Remove unverified role
                if unverified_role and unverified_role in member.roles:
                    await member.remove_roles(unverified_role)
                    logger.info(f"R√¥le 'Non v√©rifi√©' retir√© de {member.name}")
                
                # Assign member role
                await member.add_roles(member_role)
                logger.info(f"R√¥le 'Membre' assign√© √† {member.name} apr√®s acceptation du r√®glement")
                
                # Send welcome DM to the member
                try:
                    welcome_dm = discord.Embed(
                        title="‚ú® Bienvenue sur Ninis ! ‚ú®",
                        description=f"Merci d'avoir accept√© le r√®glement, {member.name} !\n\n"
                                    f"Tu as maintenant acc√®s √† tous les salons du serveur.\n"
                                    f"N'h√©site pas √† choisir tes r√¥les dans le salon des r√¥les pour personnaliser ton exp√©rience !",
                        color=discord.Colour.pink()
                    )
                    welcome_dm.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
                    
                    await member.send(embed=welcome_dm)
                except Exception as e:
                    logger.error(f"Impossible d'envoyer un DM √† {member.name}: {e}")
                
            except discord.Forbidden:
                logger.error(f"Permissions insuffisantes pour g√©rer les r√¥les")
            except Exception as e:
                logger.error(f"Erreur lors de la gestion des r√¥les: {e}")
            
            return
        
        # Pour les autres canaux, g√©rer les r√©actions de r√¥le normales
        # Log le canal actuel pour le d√©bogage
        logger.info(f"R√©action re√ßue dans le canal: {channel.name}, emoji: {str(payload.emoji)}")
        
        # Map emojis to role names
        emoji_to_role = {
            "üå∏": "üå∏ Cr√©atif.ve",
            "‚ú®": "‚ú® Gamer",
            "‚òÅ": "‚òÅ Chillax",
            "‚ãÜ": "‚ãÜ Baby Nini"
        }
        
        # Check if the emoji is one we're tracking
        emoji = str(payload.emoji)
        if emoji not in emoji_to_role:
            logger.info(f"Emoji non reconnu: {emoji}")
            return
        
        # Get the role based on emoji
        role_name = emoji_to_role[emoji]
        role = discord.utils.get(guild.roles, name=role_name)
        
        if not role:
            logger.warning(f"R√¥le '{role_name}' introuvable sur le serveur")
            # Parcourir tous les r√¥les du serveur pour voir ceux qui existent
            existing_roles = [r.name for r in guild.roles]
            logger.info(f"R√¥les existants: {existing_roles}")
            return
        
        # Get the member and assign the role
        member = guild.get_member(payload.user_id)
        if not member:
            return
        
        try:
            await member.add_roles(role)
            logger.info(f"Added role '{role_name}' to {member.name}")
        except discord.Forbidden:
            logger.error(f"Missing permissions to assign role '{role_name}'")
        except Exception as e:
            logger.error(f"Error assigning role: {e}")
    
    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        """Handle removing roles based on reaction removal."""
        # Skip if it's the bot's own reaction
        if payload.user_id == self.bot.user.id:
            return
        
        # Get the guild
        guild = self.bot.get_guild(payload.guild_id)
        if not guild:
            return
        
        # Get the channel
        channel = self.bot.get_channel(payload.channel_id)
        if not channel:
            return
            
        # Log for debugging
        logger.info(f"R√©action retir√©e dans le canal: {channel.name}, emoji: {str(payload.emoji)}")
        
        # We don't remove the verified role when reaction is removed from rules
        if channel.name == "üìñ„Éªr√®glement" and str(payload.emoji) == "‚úÖ":
            return
        
        # Map emojis to role names
        emoji_to_role = {
            "üå∏": "üå∏ Cr√©atif.ve",
            "‚ú®": "‚ú® Gamer",
            "‚òÅ": "‚òÅ Chillax",
            "‚ãÜ": "‚ãÜ Baby Nini"
        }
        
        # Check if the emoji is one we're tracking
        emoji = str(payload.emoji)
        if emoji not in emoji_to_role:
            logger.info(f"Emoji non reconnu (retrait): {emoji}")
            return
        
        # Get the role based on emoji
        role_name = emoji_to_role[emoji]
        role = discord.utils.get(guild.roles, name=role_name)
        
        if not role:
            logger.warning(f"R√¥le '{role_name}' introuvable sur le serveur (retrait)")
            return
        
        # Get the member and remove the role
        member = guild.get_member(payload.user_id)
        if not member:
            return
        
        try:
            await member.remove_roles(role)
            logger.info(f"Removed role '{role_name}' from {member.name}")
        except discord.Forbidden:
            logger.error(f"Missing permissions to remove role '{role_name}'")
        except Exception as e:
            logger.error(f"Error removing role: {e}")
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_verification(self, ctx):
        """Configure le syst√®me complet de v√©rification avec r√¥les et salons n√©cessaires."""
        guild = ctx.guild
        status_message = await ctx.send("‚è≥ Configuration du syst√®me complet de v√©rification...")
        
        # √âtape 1 : Cr√©er ou v√©rifier les r√¥les n√©cessaires
        await status_message.edit(content=f"{status_message.content}\n\n**√âtape 1/4 : Configuration des r√¥les**")
        
        # V√©rifier et cr√©er les r√¥les Membre et Non v√©rifi√©
        roles = {role.name: role for role in guild.roles}
        
        # Cr√©er le r√¥le Non v√©rifi√© s'il n'existe pas
        if "Non v√©rifi√©" not in roles:
            try:
                unverified_role = await guild.create_role(
                    name="Non v√©rifi√©",
                    colour=discord.Colour(0x95A5A6),  # Gris
                    hoist=True,       # S√©par√© dans la liste des membres
                    mentionable=True,
                    reason="R√¥le pour les nouveaux membres non v√©rifi√©s"
                )
                await status_message.edit(content=f"{status_message.content}\n‚úÖ R√¥le 'Non v√©rifi√©' cr√©√©")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du r√¥le 'Non v√©rifi√©': {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du r√¥le 'Non v√©rifi√©': {e}")
                return False
        else:
            unverified_role = roles["Non v√©rifi√©"]
            await status_message.edit(content=f"{status_message.content}\n‚ÑπÔ∏è R√¥le 'Non v√©rifi√©' d√©j√† existant")
        
        # Cr√©er le r√¥le Membre s'il n'existe pas
        if "Membre" not in roles:
            try:
                # Cr√©er le r√¥le avec les permissions de base pour un membre normal
                permissions = discord.Permissions()
                permissions.update(
                    read_messages=True,
                    send_messages=True,
                    read_message_history=True,
                    add_reactions=True,
                    connect=True,
                    speak=True
                )
                
                member_role = await guild.create_role(
                    name="Membre",
                    colour=discord.Colour(0x3498DB),  # Bleu
                    permissions=permissions,
                    hoist=True,
                    mentionable=True,
                    reason="R√¥le pour les membres ayant accept√© le r√®glement"
                )
                await status_message.edit(content=f"{status_message.content}\n‚úÖ R√¥le 'Membre' cr√©√©")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du r√¥le 'Membre': {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du r√¥le 'Membre': {e}")
                return False
        else:
            member_role = roles["Membre"]
            await status_message.edit(content=f"{status_message.content}\n‚ÑπÔ∏è R√¥le 'Membre' d√©j√† existant")
        
        # R√©cup√©rer les autres r√¥les d'administration existants
        admin_role = discord.utils.get(guild.roles, name="‚ú¶ Íí∞ Nini Queen Íí±") or discord.utils.get(guild.roles, name="Administrateur")
        mod_role = discord.utils.get(guild.roles, name="‚ô° Staff") or discord.utils.get(guild.roles, name="Mod√©rateur")
        
        # √âtape 2 : Cr√©er ou configurer la cat√©gorie d'accueil
        await status_message.edit(content=f"{status_message.content}\n\n**√âtape 2/4 : Configuration de la cat√©gorie d'accueil**")
        
        # Cr√©er ou trouver la cat√©gorie Bienvenue
        welcome_category = discord.utils.get(guild.categories, name="‡≠®‡≠ß„ÉªBienvenue")
        category_action = "mise √† jour"
        
        # D√©finir les permissions de base pour la cat√©gorie
        overwrites = {
            # Par d√©faut, personne ne voit la cat√©gorie
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            
            # Le bot peut voir et g√©rer la cat√©gorie
            guild.me: discord.PermissionOverwrite(
                read_messages=True,
                send_messages=True,
                manage_channels=True,
                manage_messages=True
            ),
            
            # Les nouveaux membres non v√©rifi√©s peuvent voir uniquement cette cat√©gorie
            unverified_role: discord.PermissionOverwrite(
                read_messages=True,
                send_messages=False,
                read_message_history=True,
                add_reactions=True
            ),
            
            # Les membres v√©rifi√©s peuvent aussi voir cette cat√©gorie
            member_role: discord.PermissionOverwrite(
                read_messages=True,
                send_messages=True,
                read_message_history=True,
                add_reactions=True
            )
        }
        
        # Ajouter les permissions pour les administrateurs et mod√©rateurs s'ils existent
        if admin_role:
            overwrites[admin_role] = discord.PermissionOverwrite(
                read_messages=True,
                send_messages=True,
                manage_channels=True,
                manage_permissions=True,
                manage_messages=True
            )
        
        if mod_role:
            overwrites[mod_role] = discord.PermissionOverwrite(
                read_messages=True,
                send_messages=True,
                manage_messages=True
            )
        
        # Cr√©er la cat√©gorie si elle n'existe pas
        if not welcome_category:
            try:
                welcome_category = await guild.create_category(
                    name="‡≠®‡≠ß„ÉªBienvenue",
                    overwrites=overwrites,
                    position=0  # En haut du serveur
                )
                category_action = "cr√©√©e"
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation de la cat√©gorie Bienvenue: {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation de la cat√©gorie Bienvenue: {e}")
                return False
        else:
            # Mettre √† jour les permissions de la cat√©gorie existante
            try:
                await welcome_category.edit(overwrites=overwrites)
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour des permissions de la cat√©gorie: {e}")
                await ctx.send(f"‚ùå Erreur lors de la mise √† jour des permissions de la cat√©gorie: {e}")
        
        await status_message.edit(content=f"{status_message.content}\n‚úÖ Cat√©gorie '‡≠®‡≠ß„ÉªBienvenue' {category_action}")
        
        # √âtape 3 : Cr√©er ou configurer les salons n√©cessaires
        await status_message.edit(content=f"{status_message.content}\n\n**√âtape 3/4 : Configuration des salons essentiels**")
        
        # Cr√©er ou configurer le salon de r√®glement
        rules_channel = discord.utils.get(guild.text_channels, name="üìñ„Éªr√®glement")
        if not rules_channel:
            try:
                # Les overwrites pour le salon sont diff√©rents - tout le monde peut voir le r√®glement
                rules_overwrites = dict(overwrites)  # Copier les permissions de base
                
                # Le salon des r√®gles est accessible aux non-v√©rifi√©s mais ils ne peuvent pas √©crire
                rules_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,
                    read_message_history=True,
                    add_reactions=True
                )
                
                rules_channel = await guild.create_text_channel(
                    name="üìñ„Éªr√®glement",
                    category=welcome_category,
                    overwrites=rules_overwrites,
                    position=0,  # Premier salon de la cat√©gorie
                    topic="R√®glement du serveur - R√©agis avec ‚úÖ pour accepter"
                )
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'r√®glement' cr√©√©")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du salon de r√®glement: {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du salon de r√®glement: {e}")
                return False
        else:
            # Mettre √† jour les permissions du salon existant
            try:
                rules_overwrites = dict(overwrites)
                rules_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,
                    read_message_history=True,
                    add_reactions=True
                )
                
                # D√©placer le salon dans la bonne cat√©gorie si n√©cessaire
                if rules_channel.category != welcome_category:
                    await rules_channel.edit(
                        category=welcome_category,
                        overwrites=rules_overwrites,
                        position=0,
                        topic="R√®glement du serveur - R√©agis avec ‚úÖ pour accepter"
                    )
                else:
                    await rules_channel.edit(
                        overwrites=rules_overwrites,
                        position=0,
                        topic="R√®glement du serveur - R√©agis avec ‚úÖ pour accepter"
                    )
                
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'r√®glement' mis √† jour")
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour du salon de r√®glement: {e}")
                await ctx.send(f"‚ùå Erreur lors de la mise √† jour du salon de r√®glement: {e}")
        
        # Cr√©er ou configurer le salon de r√¥les
        roles_channel = discord.utils.get(guild.text_channels, name="‚ú®„Éªr√¥les")
        if not roles_channel:
            try:
                # Les overwrites pour le salon des r√¥les - uniquement accessible aux membres v√©rifi√©s
                roles_overwrites = dict(overwrites)
                
                # Les non-v√©rifi√©s ne peuvent pas voir le salon des r√¥les
                roles_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=False
                )
                
                roles_channel = await guild.create_text_channel(
                    name="‚ú®„Éªr√¥les",
                    category=welcome_category,
                    overwrites=roles_overwrites,
                    position=1,  # Deuxi√®me salon de la cat√©gorie
                    topic="Choisis tes r√¥les en cliquant sur les r√©actions"
                )
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'r√¥les' cr√©√©")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du salon de r√¥les: {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du salon de r√¥les: {e}")
        else:
            # Mettre √† jour les permissions du salon existant
            try:
                roles_overwrites = dict(overwrites)
                roles_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=False
                )
                
                # D√©placer le salon dans la bonne cat√©gorie si n√©cessaire
                if roles_channel.category != welcome_category:
                    await roles_channel.edit(
                        category=welcome_category,
                        overwrites=roles_overwrites,
                        position=1,
                        topic="Choisis tes r√¥les en cliquant sur les r√©actions"
                    )
                else:
                    await roles_channel.edit(
                        overwrites=roles_overwrites,
                        position=1,
                        topic="Choisis tes r√¥les en cliquant sur les r√©actions"
                    )
                
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'r√¥les' mis √† jour")
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour du salon de r√¥les: {e}")
                await ctx.send(f"‚ùå Erreur lors de la mise √† jour du salon de r√¥les: {e}")
        
        # Cr√©er ou configurer le salon de bienvenue
        welcome_channel = discord.utils.get(guild.text_channels, name="üëã„Éªbienvenue")
        if not welcome_channel:
            try:
                # Salon de bienvenue accessible √† tous les membres
                welcome_overwrites = dict(overwrites)
                welcome_overwrites[member_role] = discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,  # Seul le bot peut y √©crire
                    read_message_history=True,
                    add_reactions=True
                )
                
                # Les non-v√©rifi√©s ne peuvent pas voir le salon de bienvenue
                welcome_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=False
                )
                
                welcome_channel = await guild.create_text_channel(
                    name="üëã„Éªbienvenue",
                    category=welcome_category,
                    overwrites=welcome_overwrites,
                    position=2,  # Troisi√®me salon de la cat√©gorie
                    topic="Bienvenue aux nouveaux membres !"
                )
                
                # Message de bienvenue par d√©faut
                welcome_embed = discord.Embed(
                    title="‚ú® Bienvenue sur le serveur ! ‚ú®",
                    description="Nous sommes ravis de t'accueillir parmi nous !\n\n"
                                "Voici quelques informations importantes :\n"
                                "‚Ä¢ Lis attentivement le r√®glement dans <#üìñ„Éªr√®glement>\n"
                                "‚Ä¢ Choisis tes r√¥les dans <#‚ú®„Éªr√¥les>\n"
                                "‚Ä¢ Pr√©sente-toi dans <#üí¨„Éªdiscussion-g√©n√©rale>",
                    color=discord.Colour.pink()
                )
                welcome_embed.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
                
                await welcome_channel.send(embed=welcome_embed)
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'bienvenue' cr√©√©")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du salon de bienvenue: {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du salon de bienvenue: {e}")
        else:
            # Mettre √† jour les permissions du salon existant
            try:
                welcome_overwrites = dict(overwrites)
                welcome_overwrites[member_role] = discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,
                    read_message_history=True,
                    add_reactions=True
                )
                
                welcome_overwrites[unverified_role] = discord.PermissionOverwrite(
                    read_messages=False
                )
                
                # D√©placer le salon dans la bonne cat√©gorie si n√©cessaire
                if welcome_channel.category != welcome_category:
                    await welcome_channel.edit(
                        category=welcome_category,
                        overwrites=welcome_overwrites,
                        position=2,
                        topic="Bienvenue aux nouveaux membres !"
                    )
                else:
                    await welcome_channel.edit(
                        overwrites=welcome_overwrites,
                        position=2,
                        topic="Bienvenue aux nouveaux membres !"
                    )
                
                await status_message.edit(content=f"{status_message.content}\n‚úÖ Salon 'bienvenue' mis √† jour")
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour du salon de bienvenue: {e}")
                await ctx.send(f"‚ùå Erreur lors de la mise √† jour du salon de bienvenue: {e}")
        
        # √âtape 4 : Configurer les messages de r√®glement et de r√¥les
        await status_message.edit(content=f"{status_message.content}\n\n**√âtape 4/4 : Configuration des messages**")
        
        # Cr√©er ou mettre √† jour le message de r√®glement
        rules_updated = await self.update_rules(ctx, rules_channel.id)
        
        if rules_updated:
            await status_message.edit(content=f"{status_message.content}\n‚úÖ Message de r√®glement configur√©")
        else:
            await status_message.edit(content=f"{status_message.content}\n‚ùå Erreur lors de la configuration du message de r√®glement")
        
        # Cr√©er ou mettre √† jour le message des r√¥les
        if roles_channel:
            roles_cog = self.bot.get_cog('Roles')
            if roles_cog:
                try:
                    # Sauvegarder le contexte original
                    original_command = ctx.command
                    
                    # D√©finir temporairement une nouvelle commande pour l'appel
                    ctx.command = self.bot.get_command('setup_role_reactions')
                    
                    # Appeler la m√©thode de configuration des r√¥les
                    await roles_cog.setup_role_reactions(ctx)
                    
                    # Restaurer le contexte original
                    ctx.command = original_command
                    
                    await status_message.edit(content=f"{status_message.content}\n‚úÖ Messages de r√¥les configur√©s")
                except Exception as e:
                    logger.error(f"Erreur lors de la configuration des messages de r√¥les: {e}")
                    await status_message.edit(content=f"{status_message.content}\n‚ùå Erreur lors de la configuration des messages de r√¥les: {e}")
            else:
                await status_message.edit(content=f"{status_message.content}\n‚ö†Ô∏è Module de r√¥les non trouv√© - configuration manuelle requise")
        
        # Configuration termin√©e, envoi du message r√©capitulatif
        embed = discord.Embed(
            title="‚úÖ Syst√®me de v√©rification configur√© avec succ√®s !",
            description="Le syst√®me de v√©rification des nouveaux membres est maintenant en place.",
            color=discord.Colour.green()
        )
        
        embed.add_field(
            name="Comment √ßa marche",
            value="1Ô∏è‚É£ Les nouveaux membres re√ßoivent automatiquement le r√¥le `Non v√©rifi√©`\n"
                 "2Ô∏è‚É£ Ils ne peuvent voir que le salon des r√®gles\n"
                 "3Ô∏è‚É£ En cliquant sur ‚úÖ, ils acceptent le r√®glement\n"
                 "4Ô∏è‚É£ Le r√¥le `Membre` leur est attribu√© automatiquement\n"
                 "5Ô∏è‚É£ Ils ont alors acc√®s √† tout le serveur",
            inline=False
        )
        
        embed.add_field(
            name="Salons configur√©s",
            value=f"üìñ {rules_channel.mention} - R√®glement √† accepter\n"
                 f"‚ú® {roles_channel.mention if roles_channel else '‚ùå Non cr√©√©'} - Choix des r√¥les\n"
                 f"üëã {welcome_channel.mention if welcome_channel else '‚ùå Non cr√©√©'} - Accueil des nouveaux",
            inline=False
        )
        
        embed.add_field(
            name="R√¥les configur√©s",
            value=f"üîπ `Non v√©rifi√©` - Attribu√© automatiquement\n"
                 f"üîπ `Membre` - Apr√®s acceptation du r√®glement\n"
                 f"üîπ R√¥les optionnels - Gar√ßon/Fille, Majeur/Mineur",
            inline=False
        )
        
        embed.set_footer(text="üí° Rappel : pensez √† configurer les autres cat√©gories pour qu'elles soient visibles uniquement par les membres v√©rifi√©s !")
        
        # Mise √† jour de la derni√®re configuration
        # Enregistrer la date de la derni√®re configuration
        self.save_verification_info(guild.id, {
            "last_setup": datetime.now().isoformat(),
            "rules_channel_id": rules_channel.id if rules_channel else None,
            "roles_channel_id": roles_channel.id if roles_channel else None,
            "welcome_channel_id": welcome_channel.id if welcome_channel else None,
            "member_role_id": member_role.id if member_role else None,
            "unverified_role_id": unverified_role.id if unverified_role else None
        })
        
        await ctx.send(embed=embed)
        return True
    
    def save_verification_info(self, guild_id, info):
        """Sauvegarde les informations de v√©rification pour le serveur."""
        try:
            # V√©rifier si le fichier existe et le charger
            verification_data = {}
            if os.path.exists('verification_data.json'):
                with open('verification_data.json', 'r') as f:
                    verification_data = json.load(f)
            
            # Mettre √† jour les donn√©es pour ce serveur
            verification_data[str(guild_id)] = info
            
            # Sauvegarder les donn√©es
            with open('verification_data.json', 'w') as f:
                json.dump(verification_data, f, indent=4)
                
            logger.info(f"Informations de v√©rification sauvegard√©es pour le serveur {guild_id}")
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des informations de v√©rification: {e}")
            return False
            
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def update_rules(self, ctx, channel_id=None):
        """Met √† jour le r√®glement du serveur avec un syst√®me de r√¥le-r√©action pour l'acceptation."""
        # Si aucun canal n'est sp√©cifi√©, essayez de trouver celui des r√®gles
        if channel_id is None:
            rules_channel = discord.utils.get(ctx.guild.text_channels, name="üìñ„Éªr√®glement")
            if not rules_channel:
                await ctx.send("‚ùå Canal de r√®glement introuvable. Sp√©cifie un ID de canal ou cr√©e d'abord le salon 'üìñ„Éªr√®glement' avec `!setup_verification`.")
                return False
            channel = rules_channel
        else:
            try:
                channel = await self.bot.fetch_channel(int(channel_id))
            except (ValueError, discord.NotFound, discord.Forbidden):
                await ctx.send("‚ùå Canal introuvable. V√©rifie l'ID et mes permissions.")
                return False
        
        # V√©rifier que les r√¥les n√©cessaires existent
        roles = {role.name: role for role in ctx.guild.roles}
        member_role = roles.get("Membre")
        unverified_role = roles.get("Non v√©rifi√©")
        
        if not member_role:
            await ctx.send("‚ö†Ô∏è Le r√¥le 'Membre' n'existe pas. Je vais le cr√©er.")
            try:
                permissions = discord.Permissions()
                permissions.update(
                    read_messages=True,
                    send_messages=True,
                    read_message_history=True,
                    add_reactions=True,
                    connect=True,
                    speak=True
                )
                member_role = await ctx.guild.create_role(
                    name="Membre",
                    colour=discord.Colour(0x3498DB),  # Bleu
                    permissions=permissions,
                    hoist=True,
                    mentionable=True,
                    reason="R√¥le pour les membres ayant accept√© le r√®glement"
                )
                await ctx.send("‚úÖ R√¥le 'Membre' cr√©√© avec succ√®s.")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du r√¥le 'Membre': {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du r√¥le 'Membre': {e}")
                return False
        
        if not unverified_role:
            await ctx.send("‚ö†Ô∏è Le r√¥le 'Non v√©rifi√©' n'existe pas. Je vais le cr√©er.")
            try:
                unverified_role = await ctx.guild.create_role(
                    name="Non v√©rifi√©",
                    colour=discord.Colour(0x95A5A6),  # Gris
                    hoist=True,
                    mentionable=True,
                    reason="R√¥le pour les nouveaux membres non v√©rifi√©s"
                )
                await ctx.send("‚úÖ R√¥le 'Non v√©rifi√©' cr√©√© avec succ√®s.")
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation du r√¥le 'Non v√©rifi√©': {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation du r√¥le 'Non v√©rifi√©': {e}")
                return False
        
        # Cr√©ation de l'embed de r√®glement
        rules_embed = discord.Embed(
            title="‡≠®‡≠ßÔπí R√àGLEMENT DU SERVEUR NINIS Ôπí‡≠®‡≠ß",
            description="Pour acc√©der au serveur, tu dois lire et accepter le r√®glement ci-dessous :",
            color=discord.Colour.pink()
        )
        # Ajout d'une image cute core
        rules_embed.set_image(url="https://media.discordapp.net/attachments/1081222505335267448/1093466437046317076/cute-heart.gif")
        
        # Contenu du r√®glement - Nouveau texte
        rules_text = """
‚ï≠Ô∏∞‡≠®‡≠ßÔ∏∞ÔπíÍí∞ ùì°ùìîÃÄùìñùìõùìîùìúùìîùìùùì£ Íí±ÔπíÔ∏∞‡≠®‡≠ßÔ∏∞‚ïÆ

‚ô° 1.  Sois respectueux.se et bienveillant.e avec chacun.e
‚ô° 2.  Aucun contenu NSFW, choquant ou inappropri√©
‚ô° 3.  Pas de propos haineux, discriminants ou toxiques
‚ô° 4.  Pas de spam, pub sauvage ou MP non sollicit√©s
‚ô° 5.  Garde un pseudo et une photo corrects
‚ô° 6.  Pas d'auto-promo sans l'accord du staff
‚ô° 7.  Respecte la vie priv√©e des autres membres
‚ô° 8.  Le drama reste dehors, ici c'est chill & cozy
‚ô° 9.  Utilise les bons salons pour chaque sujet
‚ô° 10. Les d√©cisions du staff sont √† respecter

Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂Ô∏∂

**En cliquant sur ‚úÖ, tu acceptes ce r√®glement**
et tu recevras le r√¥le `Membre` pour acc√©der √† tout le serveur !

‚ï∞Ô∏∞‡≠®‡≠ßÔ∏∞ÔπíMerci d'√™tre l√†, on t'aime fort !ÔπíÔ∏∞‡≠®‡≠ßÔ∏∞‚ïØ
        """
        
        rules_embed.add_field(name="R√®gles de la communaut√©", value=rules_text, inline=False)
        rules_embed.add_field(
            name="Acceptation du r√®glement",
            value="Pour acc√©der au serveur, r√©agis avec ‚úÖ pour confirmer que tu as lu et accept√© le r√®glement.",
            inline=False
        )
        rules_embed.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
        
        # Purge le canal des messages existants
        try:
            await channel.purge(limit=100)
            logger.info(f"Canal '{channel.name}' nettoy√© pour le nouveau r√®glement")
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage du canal '{channel.name}': {e}")
            await ctx.send(f"‚ö†Ô∏è Je n'ai pas pu nettoyer le canal. Erreur: {e}")
        
        # Envoie le nouveau r√®glement
        rules_message = await channel.send(embed=rules_embed)
        
        # Ajoute la r√©action pour accepter
        await rules_message.add_reaction("‚úÖ")
        
        # Sauvegarde l'ID du message et du canal pour les futures utilisations
        try:
            with open('rules_data.json', 'w') as f:
                rules_data = {
                    "rules_message_id": rules_message.id,
                    "rules_channel_id": channel.id
                }
                json.dump(rules_data, f, indent=4)
                
            # Mise √† jour des variables globales
            config.RULES_MESSAGE_ID = rules_message.id
            config.RULES_CHANNEL_ID = channel.id
            
            logger.info(f"IDs sauvegard√©s: Message: {rules_message.id}, Canal: {channel.id}")
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des IDs: {e}")
            await ctx.send(f"‚ö†Ô∏è Erreur lors de la sauvegarde des donn√©es: {e}")
        
        # Configurer le gestionnaire d'√©v√©nements raw_reaction_add s'il n'existe pas d√©j√†
        if not hasattr(self.bot, '_rules_reaction_handler_registered'):
            @self.bot.event
            async def on_raw_reaction_add(payload):
                # V√©rifier si c'est une r√©action sur le message de r√®glement
                if payload.message_id == config.RULES_MESSAGE_ID:
                    # V√©rifier si c'est la bonne r√©action (‚úÖ)
                    if str(payload.emoji) == config.RULES_EMOJI:
                        # Ignorer les r√©actions du bot
                        if payload.user_id == self.bot.user.id:
                            return
                        
                        # Obtenir le serveur et le membre
                        guild = self.bot.get_guild(payload.guild_id)
                        if not guild:
                            return
                        
                        member = guild.get_member(payload.user_id)
                        if not member:
                            return
                        
                        # Obtenir le r√¥le "Membre"
                        member_role = discord.utils.get(guild.roles, name="Membre")
                        unverified_role = discord.utils.get(guild.roles, name="Non v√©rifi√©")
                        
                        if not member_role:
                            logger.error("R√¥le 'Membre' non trouv√©!")
                            return
                        
                        # V√©rifier si le membre n'a pas d√©j√† le r√¥le
                        if member_role not in member.roles:
                            try:
                                # Ajouter le r√¥le "Membre"
                                await member.add_roles(member_role)
                                logger.info(f"R√¥le 'Membre' ajout√© √† {member.display_name}")
                                
                                # Retirer le r√¥le "Non v√©rifi√©" si pr√©sent
                                if unverified_role and unverified_role in member.roles:
                                    await member.remove_roles(unverified_role)
                                    logger.info(f"R√¥le 'Non v√©rifi√©' retir√© de {member.display_name}")
                                
                                # Envoyer un message de bienvenue priv√©
                                try:
                                    welcome_embed = discord.Embed(
                                        title="‚ú® Bienvenue sur Ninis ! ‚ú®",
                                        description=f"Merci d'avoir accept√© le r√®glement, {member.mention} !\n\n"
                                                   f"Tu as maintenant acc√®s √† tous les salons du serveur. N'h√©site pas √† te pr√©senter et √† choisir tes r√¥les dans le salon <#‚ú®„Éªr√¥les>.",
                                        color=discord.Colour.green()
                                    )
                                    welcome_embed.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
                                    
                                    await member.send(embed=welcome_embed)
                                except Exception as e:
                                    logger.error(f"Impossible d'envoyer un DM √† {member.display_name}: {e}")
                            except Exception as e:
                                logger.error(f"Erreur lors de l'attribution du r√¥le 'Membre' √† {member.display_name}: {e}")
            
            self.bot._rules_reaction_handler_registered = True
            logger.info("Gestionnaire d'√©v√©nements pour les r√©actions du r√®glement enregistr√©")
        
        await ctx.send(f"‚úÖ R√®glement mis √† jour dans <#{channel.id}> avec syst√®me d'acceptation par r√©action.")
        return True

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def create_bot_commands(self, ctx):
        """Create a dedicated channel for bot commands."""
        # Check if a commands channel already exists
        existing_channel = discord.utils.get(ctx.guild.text_channels, name="ü§ñ„Éªcommandes-bot")
        
        if existing_channel:
            await ctx.send(f"‚ö†Ô∏è Le salon {existing_channel.mention} existe d√©j√†.")
            return
            
        try:
            # Look for a utility category or create one
            category = discord.utils.get(ctx.guild.categories, name="üí¨ DISCUSSIONS")
            
            if not category:
                # Look for other community-like categories
                for cat in ctx.guild.categories:
                    if "discussion" in cat.name.lower() or "communaut" in cat.name.lower() or "chat" in cat.name.lower():
                        category = cat
                        break
            
            if not category:
                # Create a new category
                category = await ctx.guild.create_category(name="üí¨ DISCUSSIONS")
                logger.info(f"Created new category 'üí¨ DISCUSSIONS' in {ctx.guild.name}")
            
            # Create permissions overwrites for the channel
            overwrites = {
                ctx.guild.default_role: discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=True
                ),
                ctx.guild.me: discord.PermissionOverwrite(
                    read_messages=True,
                    send_messages=True,
                    embed_links=True,
                    attach_files=True,
                    manage_messages=True
                )
            }
            
            # Create the channel
            channel = await ctx.guild.create_text_channel(
                name="ü§ñ„Éªcommandes-bot",
                category=category,
                overwrites=overwrites,
                topic="Salon pour les commandes du bot Ninis"
            )
            
            # Send confirmation
            embed = discord.Embed(
                title="‚úÖ Salon de commandes bot cr√©√©",
                description=f"Le salon {channel.mention} a √©t√© cr√©√© pour utiliser les commandes du bot.",
                color=discord.Colour.green()
            )
            
            await ctx.send(embed=embed)
            
            # Send welcome message in the new channel
            welcome_embed = discord.Embed(
                title="ü§ñ Commandes Bot Ninis",
                description="Ce salon est d√©di√© aux commandes du bot Ninis.\n\n"
                            "Voici quelques commandes utiles :\n"
                            f"‚Ä¢ `{config.PREFIX}help` - Voir toutes les commandes disponibles\n"
                            f"‚Ä¢ `{config.PREFIX}info` - Informations sur le bot\n"
                            f"‚Ä¢ `{config.PREFIX}serverinfo` - Informations sur le serveur\n"
                            f"‚Ä¢ `{config.PREFIX}check_tiktok_now` - V√©rifier les mises √† jour TikTok",
                color=discord.Colour.blue()
            )
            
            welcome_embed.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
            
            await channel.send(embed=welcome_embed)
            
        except Exception as e:
            logger.error(f"Error creating bot commands channel: {e}")
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du salon: {e}")
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def reset_server(self, ctx):
        """Reset the entire server by deleting all channels and roles."""
        guild = ctx.guild
        
        # Generate a random verification code for security
        verification_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        
        # Create warning embed with verification
        warning_embed = discord.Embed(
            title="‚ö†Ô∏è R√âINITIALISATION TOTALE DU SERVEUR ‚ö†Ô∏è",
            description="Cette commande va supprimer **TOUS** les salons et r√¥les du serveur, et le remettre √† z√©ro.\n\n"
                        "**ATTENTION: Cette action est irr√©versible et destructive !**",
            color=discord.Colour.red()
        )
        warning_embed.add_field(
            name="Confirmation requise",
            value=f"Pour confirmer, tape exactement:\n`{verification_code}`\n\n"
                  f"Tu as 30 secondes pour confirmer, ou `annuler` pour annuler.",
            inline=False
        )
        warning_embed.set_footer(text="‚ö†Ô∏è Cette action est extr√™mement destructive et ne peut pas √™tre annul√©e.")
        
        await ctx.send(embed=warning_embed)
        
        # Wait for confirmation with the exact verification code
        try:
            def check(message):
                return message.author == ctx.author and message.channel == ctx.channel and \
                       (message.content == verification_code or message.content.lower() == "annuler")
            
            response = await self.bot.wait_for('message', check=check, timeout=30.0)
            
            if response.content.lower() == "annuler":
                await ctx.send("‚úÖ R√©initialisation annul√©e.")
                return
            
            if response.content != verification_code:
                await ctx.send("‚ùå Code de v√©rification incorrect. R√©initialisation annul√©e.")
                return
                
        except asyncio.TimeoutError:
            await ctx.send("‚è±Ô∏è D√©lai d'attente expir√©. R√©initialisation annul√©e.")
            return
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_basic_roles(self, ctx):
        """Configure les r√¥les de base simplifi√©s pour le serveur (Owner, Nini Queen, Administrateur, Mod√©rateur, Membre)."""
        guild = ctx.guild
        
        # Message de confirmation
        embed = discord.Embed(
            title="üëë Configuration des r√¥les simplifi√©s",
            description=(
                "Cette commande va configurer les r√¥les essentiels suivants UNIQUEMENT :\n\n"
                "‚Ä¢ Owner (Propri√©taire)\n"
                "‚Ä¢ ‚ú¶ Íí∞ Nini Queen Íí±\n"
                "‚Ä¢ Administrateur\n"
                "‚Ä¢ Mod√©rateur\n"
                "‚Ä¢ Membre\n\n"
                "Les autres r√¥les seront supprim√©s pour simplifier la structure."
            ),
            color=discord.Colour.gold()
        )
        
        embed.set_footer(text="R√©ponds avec 'oui' pour confirmer ou 'non' pour annuler.")
        
        await ctx.send(embed=embed)
        
        # Attendre la confirmation
        try:
            def check(message):
                return message.author == ctx.author and message.channel == ctx.channel and \
                       message.content.lower() in ["oui", "non", "yes", "no"]
            
            response = await self.bot.wait_for('message', check=check, timeout=60.0)
            
            if response.content.lower() in ["non", "no"]:
                await ctx.send("‚ùå Configuration annul√©e.")
                return
                
        except asyncio.TimeoutError:
            await ctx.send("‚è±Ô∏è D√©lai d'attente expir√©. Configuration annul√©e.")
            return
            
        # Envoyer un message indiquant que la configuration a commenc√©
        status_message = await ctx.send("‚è≥ Configuration des r√¥les de base en cours...")
        
        # R√©cup√©rer les r√¥les existants
        existing_roles = {role.name: role for role in guild.roles}
        
        # Cr√©er ou mettre √† jour les r√¥les de base
        created_roles = []
        updated_roles = []
        
        for role_name, role_data in config.BASIC_ROLES.items():
            if role_name in existing_roles:
                # Le r√¥le existe d√©j√†, mettre √† jour ses propri√©t√©s
                try:
                    role = existing_roles[role_name]
                    
                    # D√©finir les permissions administratives si n√©cessaire
                    if role_data["permissions"]:
                        permissions = discord.Permissions()
                        permissions.update(
                            administrator=True
                        )
                    else:
                        # Permissions de base pour les membres
                        permissions = discord.Permissions()
                        permissions.update(
                            read_messages=True,
                            send_messages=True,
                            read_message_history=True,
                            add_reactions=True,
                            connect=True,
                            speak=True
                        )
                    
                    # Mettre √† jour le r√¥le
                    await role.edit(
                        colour=discord.Colour(role_data["color"]),
                        permissions=permissions,
                        hoist=role_data["hoist"],
                        mentionable=role_data["mentionable"],
                        reason="Mise √† jour du r√¥le via !setup_basic_roles"
                    )
                    updated_roles.append(role_name)
                    logger.info(f"R√¥le '{role_name}' mis √† jour avec succ√®s")
                except Exception as e:
                    logger.error(f"Erreur lors de la mise √† jour du r√¥le '{role_name}': {e}")
                    await ctx.send(f"‚ùå Erreur lors de la mise √† jour du r√¥le '{role_name}': {e}")
            else:
                # Le r√¥le n'existe pas, le cr√©er
                try:
                    # D√©finir les permissions administratives si n√©cessaire
                    if role_data["permissions"]:
                        permissions = discord.Permissions()
                        permissions.update(
                            administrator=True
                        )
                    else:
                        # Permissions de base pour les membres
                        permissions = discord.Permissions()
                        permissions.update(
                            read_messages=True,
                            send_messages=True,
                            read_message_history=True,
                            add_reactions=True,
                            connect=True,
                            speak=True
                        )
                    
                    # Cr√©er le r√¥le
                    new_role = await guild.create_role(
                        name=role_name,
                        colour=discord.Colour(role_data["color"]),
                        permissions=permissions,
                        hoist=role_data["hoist"],
                        mentionable=role_data["mentionable"],
                        reason="Cr√©ation de r√¥le via !setup_basic_roles"
                    )
                    created_roles.append(role_name)
                    logger.info(f"R√¥le '{role_name}' cr√©√© avec succ√®s")
                    
                    # Mettre √† jour la position du r√¥le pour l'Owner en haut
                    if role_name == "Owner":
                        # Placer Owner tout en haut, juste en dessous du bot
                        try:
                            positions = {
                                new_role: guild.me.top_role.position - 1
                            }
                            await guild.edit_role_positions(positions=positions)
                            logger.info(f"Position du r√¥le '{role_name}' mise √† jour")
                        except Exception as e:
                            logger.error(f"Erreur lors de la mise √† jour de la position du r√¥le '{role_name}': {e}")
                    
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation du r√¥le '{role_name}': {e}")
                    await ctx.send(f"‚ùå Erreur lors de la cr√©ation du r√¥le '{role_name}': {e}")
        
        # Mettre √† jour le message de statut
        summary = ""
        
        if created_roles:
            summary += f"‚úÖ **R√¥les cr√©√©s ({len(created_roles)})** :\n"
            summary += "‚Ä¢ " + "\n‚Ä¢ ".join(created_roles) + "\n\n"
        
        if updated_roles:
            summary += f"‚úÖ **R√¥les mis √† jour ({len(updated_roles)})** :\n"
            summary += "‚Ä¢ " + "\n‚Ä¢ ".join(updated_roles)
        
        if not created_roles and not updated_roles:
            summary = "‚ùå Aucun r√¥le n'a √©t√© cr√©√© ou mis √† jour."
        
        # Cr√©er un embed r√©capitulatif
        embed = discord.Embed(
            title="‚ú® Configuration des r√¥les de base termin√©e",
            description="Les r√¥les de base ont √©t√© configur√©s pour le serveur.",
            color=discord.Colour.green()
        )
        
        embed.add_field(
            name="R√©sum√©",
            value=summary,
            inline=False
        )
        
        embed.add_field(
            name="Prochaines √©tapes",
            value="1. Utilise `!setup_verification` pour configurer le syst√®me de v√©rification\n"
                 "2. Associe les r√¥les aux membres appropri√©s manuellement\n"
                 "3. Configure les salons avec les permissions appropri√©es",
            inline=False
        )
        
        embed.set_footer(text="‚úß Ninis ‚Ä¢ Made with üíñ")
        
        await status_message.edit(content="", embed=embed)

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_bot(self, ctx):
        """Configure un ensemble de salons et cat√©gories d√©di√©s aux commandes du bot."""
        guild = ctx.guild
        
        # Cr√©e une cat√©gorie pour les commandes du bot
        try:
            # Cr√©ation d'une cat√©gorie pour les commandes du bot
            bot_category = await guild.create_category("ü§ñ„ÉªBOT", position=0)
            
            # Cr√©ation du salon de commandes
            command_channel = await guild.create_text_channel(
                "üëæ„Éªcommandes", 
                category=bot_category,
                topic="Utilisez ce salon pour les commandes du bot"
            )
            
            # Cr√©ation d'un salon de logs
            logs_channel = await guild.create_text_channel(
                "üìù„Éªlogs", 
                category=bot_category,
                topic="Logs automatiques du serveur"
            )
            
            # Message de confirmation
            embed = discord.Embed(
                title="‚úÖ Configuration des salons bot termin√©e",
                description="Les salons d√©di√©s au bot ont √©t√© cr√©√©s avec succ√®s !",
                color=discord.Colour.green()
            )
            
            embed.add_field(
                name="Salons cr√©√©s",
                value=f"‚Ä¢ {command_channel.mention}\n‚Ä¢ {logs_channel.mention}",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des salons du bot: {e}")
            await ctx.send(f"‚ùå Une erreur est survenue: {e}")
            
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_basic_roles(self, ctx):
        """Cr√©e les r√¥les de base pour le serveur, y compris les r√¥les de niveau."""
        guild = ctx.guild
        
        # Message d'initialisation
        status_message = await ctx.send("‚è≥ Configuration des r√¥les de base...")
        
        # Cr√©er les r√¥les de base
        roles_created = []
        roles_updated = []
        roles_failed = []
        
        # Parcourir tous les r√¥les de la configuration
        for role_name, role_data in config.BASIC_ROLES.items():
            # V√©rifier si le r√¥le existe d√©j√†
            existing_role = discord.utils.get(guild.roles, name=role_name)
            
            if existing_role:
                # Mettre √† jour le r√¥le existant
                try:
                    await existing_role.edit(
                        colour=discord.Colour(role_data["color"]),
                        hoist=role_data.get("hoist", False),
                        mentionable=role_data.get("mentionable", False),
                        reason="Mise √† jour des r√¥les de base"
                    )
                    roles_updated.append(f"‚úÖ **{role_name}** (mis √† jour)")
                except Exception as e:
                    logger.error(f"Erreur lors de la mise √† jour du r√¥le '{role_name}': {e}")
                    roles_failed.append(f"‚ùå **{role_name}** (erreur: {e})")
            else:
                # Cr√©er le nouveau r√¥le
                try:
                    permissions = discord.Permissions()
                    if role_data.get("permissions", False):
                        # R√¥le d'administration avec toutes les permissions
                        permissions.update(administrator=True)
                    else:
                        # R√¥le normal avec permissions de base
                        permissions.update(
                            read_messages=True,
                            send_messages=True,
                            read_message_history=True,
                            add_reactions=True,
                            connect=True,
                            speak=True
                        )
                    
                    new_role = await guild.create_role(
                        name=role_name,
                        colour=discord.Colour(role_data["color"]),
                        permissions=permissions,
                        hoist=role_data.get("hoist", False),
                        mentionable=role_data.get("mentionable", False),
                        reason="Cr√©ation des r√¥les de base"
                    )
                    roles_created.append(f"‚úÖ **{role_name}** (cr√©√©)")
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation du r√¥le '{role_name}': {e}")
                    roles_failed.append(f"‚ùå **{role_name}** (erreur: {e})")
        
        # Mettre √† jour le message de statut
        await status_message.edit(content="‚úÖ Configuration des r√¥les termin√©e !")
        
        # Cr√©er un embed pour afficher les r√©sultats
        embed = discord.Embed(
            title="üîß Configuration des R√¥les",
            description="R√©sultat de la cr√©ation des r√¥les de base pour le serveur",
            color=0xffaadd
        )
        
        if roles_created:
            embed.add_field(
                name="R√¥les cr√©√©s",
                value="\n".join(roles_created),
                inline=False
            )
        
        if roles_updated:
            embed.add_field(
                name="R√¥les mis √† jour",
                value="\n".join(roles_updated),
                inline=False
            )
        
        if roles_failed:
            embed.add_field(
                name="Erreurs",
                value="\n".join(roles_failed),
                inline=False
            )
        
        # Ajouter des informations sur les r√¥les de niveau
        embed.add_field(
            name="R√¥les de niveau",
            value=(
                "Les r√¥les de niveau ont √©t√© cr√©√©s/mis √† jour :\n"
                "‚Ä¢ **Nini Nouveau** ‚Äî Niveau 1\n"
                "‚Ä¢ **Nini Curieux** ‚Äî Niveau 5\n"
                "‚Ä¢ **Nini Actif** ‚Äî Niveau 10\n"
                "‚Ä¢ **Nini Confirm√©** ‚Äî Niveau 20\n"
                "‚Ä¢ **Nini L√©gende** ‚Äî Niveau 30\n\n"
                "*Pour cr√©er uniquement les r√¥les de niveau, utilisez `!setup_levels`*"
            ),
            inline=False
        )
        
        await ctx.send(embed=embed)

async def setup(bot):
    """Setup function for the cog."""
    await bot.add_cog(Setup(bot))
