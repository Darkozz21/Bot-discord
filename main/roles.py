"""
Module de gestion des r√¥les pour le Bot Ninis.
Ce module permet de configurer et g√©rer les r√¥les-r√©action.
"""

import discord
import logging
import asyncio
import json
import os
from discord.ext import commands

# Configuration du logger
logger = logging.getLogger('ninis_bot')

# Structure des r√¥les-r√©action
REACTION_ROLES = {
    "Sexe": {
        "üë¶": {"name": "Gar√ßon", "color": 0x3498DB},  # Bleu
        "üëß": {"name": "Fille", "color": 0xFF69B4},   # Rose
    },
    "√Çge": {
        "üîû": {"name": "Majeur", "color": 0x9B59B6},  # Violet
        "üß∏": {"name": "Mineur", "color": 0x2ECC71},  # Vert
    }
}

class Roles(commands.Cog):
    """Commandes pour la gestion des r√¥les et des r√¥les-r√©action."""

    def __init__(self, bot):
        self.bot = bot
        self.role_message_ids = {}
        # Charger les IDs des messages de r√¥le s'ils existent
        self.load_role_messages()

    def load_role_messages(self):
        """Charge les IDs des messages de r√¥le-r√©action depuis un fichier."""
        try:
            if os.path.exists('role_messages.json'):
                with open('role_messages.json', 'r') as f:
                    self.role_message_ids = json.load(f)
                    logger.info(f"Donn√©es de r√¥les-r√©action charg√©es: {len(self.role_message_ids)} cat√©gories")
        except Exception as e:
            logger.error(f"Erreur lors du chargement des donn√©es de r√¥les-r√©action: {e}")
            self.role_message_ids = {}

    def save_role_messages(self):
        """Sauvegarde les IDs des messages de r√¥le-r√©action dans un fichier."""
        try:
            with open('role_messages.json', 'w') as f:
                json.dump(self.role_message_ids, f, indent=4)
                logger.info(f"Donn√©es de r√¥les-r√©action sauvegard√©es: {len(self.role_message_ids)} cat√©gories")
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des donn√©es de r√¥les-r√©action: {e}")

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        """G√®re l'ajout de r√©actions pour attribuer des r√¥les."""
        # Ignore les r√©actions du bot
        if payload.user_id == self.bot.user.id:
            return

        # V√©rifie si le message est un message de r√¥le-r√©action
        message_id_str = str(payload.message_id)
        
        # Recherche la cat√©gorie correspondant au message
        target_category = None
        for cat, data in self.role_message_ids.items():
            if data.get('message_id') == message_id_str:
                target_category = cat
                break
                
        if not target_category:
            return

        guild = self.bot.get_guild(payload.guild_id)
        if not guild:
            return

        member = guild.get_member(payload.user_id)
        if not member:
            return

        emoji = str(payload.emoji)
        
        # Correction pour Unicode: Si la cat√©gorie a un caract√®re accentu√©
        if target_category == "\u00c2ge":
            target_category = "√Çge"
        
        # V√©rifie si l'emoji correspond √† un r√¥le dans cette cat√©gorie
        if emoji in REACTION_ROLES.get(target_category, {}):
            role_info = REACTION_ROLES[target_category][emoji]
            role_name = role_info["name"]
            
            # V√©rifie si le r√¥le existe
            role = discord.utils.get(guild.roles, name=role_name)
            if not role:
                # Cr√©e le r√¥le s'il n'existe pas
                role = await guild.create_role(
                    name=role_name,
                    color=discord.Colour(role_info["color"]),
                    mentionable=True,
                    reason=f"R√¥le-r√©action cr√©√© pour la cat√©gorie {target_category}"
                )
                logger.info(f"R√¥le '{role_name}' cr√©√© pour la cat√©gorie {target_category}")
            
            # Si le membre a d√©j√† le r√¥le, on ne fait rien
            if role in member.roles:
                logger.info(f"{member.name} a d√©j√† le r√¥le {role_name}")
            else:
                # Enl√®ve tous les autres r√¥les de la m√™me cat√©gorie d'abord
                for other_emoji, other_role_info in REACTION_ROLES[target_category].items():
                    other_role_name = other_role_info["name"]
                    other_role = discord.utils.get(guild.roles, name=other_role_name)
                    
                    if other_role and other_role in member.roles:
                        await member.remove_roles(other_role, reason=f"Changement de r√¥le dans la cat√©gorie {target_category}")
                        logger.info(f"R√¥le '{other_role_name}' retir√© de {member.name}")
                
                # Attribue le nouveau r√¥le
                await member.add_roles(role, reason=f"R√¥le-r√©action ({target_category})")
                logger.info(f"R√¥le '{role_name}' attribu√© √† {member.name}")
                
                # Envoie un message priv√© de confirmation
                try:
                    await member.send(f"‚úÖ Tu as re√ßu le r√¥le **{role_name}** dans la cat√©gorie **{target_category}**")
                except discord.Forbidden:
                    logger.error(f"Impossible d'envoyer un DM √† {member.name}: Messages priv√©s d√©sactiv√©s")
        
        # Retire la r√©action de l'utilisateur pour garder le message propre
        channel = guild.get_channel(payload.channel_id)
        if channel:
            try:
                message = await channel.fetch_message(payload.message_id)
                await message.remove_reaction(payload.emoji, member)
                logger.info(f"R√©action retir√©e dans le canal: {channel.name}, emoji: {emoji}")
            except Exception as e:
                logger.error(f"Erreur lors de la suppression de la r√©action: {e}")

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        """G√®re la suppression de r√©actions pour retirer des r√¥les.
        Cette m√©thode n'est pas utilis√©e car on retire automatiquement la r√©action de l'utilisateur."""
        pass

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_role_reactions(self, ctx):
        """Configure le syst√®me de r√¥les-r√©action avec les cat√©gories Sexe et √Çge."""
        # Trouver le salon de r√¥les
        roles_channel = discord.utils.get(ctx.guild.text_channels, name="‚ú®„Éªr√¥les")
        
        if not roles_channel:
            # Si le salon n'existe pas, demander √† l'utilisateur s'il veut le cr√©er
            await ctx.send("‚ùì Le salon '‚ú®„Éªr√¥les' n'existe pas. Voulez-vous le cr√©er ? (oui/non)")
            
            try:
                def check(message):
                    return message.author == ctx.author and message.channel == ctx.channel and \
                           message.content.lower() in ["oui", "non", "yes", "no"]
                
                response = await self.bot.wait_for('message', check=check, timeout=60.0)
                
                if response.content.lower() in ["oui", "yes"]:
                    # Cr√©er le salon
                    overwrites = {
                        ctx.guild.default_role: discord.PermissionOverwrite(
                            read_messages=True,
                            send_messages=False,
                            add_reactions=True
                        ),
                        ctx.guild.me: discord.PermissionOverwrite(
                            read_messages=True,
                            send_messages=True,
                            manage_messages=True,
                            add_reactions=True
                        )
                    }
                    
                    # Chercher la cat√©gorie Bienvenue ou similaire
                    welcome_category = None
                    for category in ctx.guild.categories:
                        if "bienvenue" in category.name.lower() or "welcome" in category.name.lower():
                            welcome_category = category
                            break
                    
                    if not welcome_category:
                        welcome_category = await ctx.guild.create_category(name="‡≠®‡≠ß„ÉªBienvenue")
                        
                    roles_channel = await ctx.guild.create_text_channel(
                        name="‚ú®„Éªr√¥les",
                        category=welcome_category,
                        overwrites=overwrites,
                        topic="Choisis tes r√¥les en cliquant sur les r√©actions"
                    )
                    
                    await ctx.send(f"‚úÖ Salon {roles_channel.mention} cr√©√© avec succ√®s.")
                else:
                    return await ctx.send("‚ùå Configuration annul√©e. Veuillez cr√©er un salon '‚ú®„Éªr√¥les' manuellement.")
            except asyncio.TimeoutError:
                return await ctx.send("‚è±Ô∏è D√©lai d'attente expir√©. Configuration annul√©e.")
        
        # V√©rifier si les r√¥les existent d√©j√†, sinon les cr√©er
        for category, roles in REACTION_ROLES.items():
            for emoji, role_info in roles.items():
                role_name = role_info["name"]
                role = discord.utils.get(ctx.guild.roles, name=role_name)
                
                if not role:
                    await ctx.guild.create_role(
                        name=role_name,
                        color=discord.Colour(role_info["color"]),
                        mentionable=True,
                        reason=f"R√¥le pour la cat√©gorie {category}"
                    )
                    logger.info(f"R√¥le '{role_name}' cr√©√© pour la cat√©gorie {category}")
        
        await ctx.send("‚è≥ Configuration des messages de r√¥les-r√©action en cours...")
        
        # Cr√©er ou mettre √† jour les messages de r√¥les-r√©action par cat√©gorie
        for category, roles in REACTION_ROLES.items():
            # Cr√©er l'embed pour cette cat√©gorie
            embed = discord.Embed(
                title=f"üè∑Ô∏è Choisis ton r√¥le : {category}",
                description=f"Clique sur une r√©action ci-dessous pour choisir ton r√¥le dans la cat√©gorie **{category}**.\n\n"
                            f"**IMPORTANT :** Tu ne peux choisir qu'un SEUL r√¥le dans cette cat√©gorie. "
                            f"Ton choix pr√©c√©dent sera automatiquement remplac√©.\n\n",
                color=discord.Colour.gold()
            )
            
            # Ajouter les descriptions de r√¥les
            for emoji, role_info in roles.items():
                embed.description += f"{emoji} : **{role_info['name']}**\n"
            
            embed.set_footer(text="Ton choix est exclusif : un seul r√¥le par cat√©gorie.")
            
            # V√©rifier si un message existe d√©j√† pour cette cat√©gorie
            message_id = self.role_message_ids.get(category, {}).get('message_id')
            message = None
            
            if message_id:
                try:
                    message = await roles_channel.fetch_message(int(message_id))
                    # Mettre √† jour le message existant
                    await message.edit(embed=embed)
                    await message.clear_reactions()
                    logger.info(f"Message de r√¥les-r√©action existant mis √† jour pour la cat√©gorie {category}")
                except (discord.NotFound, discord.Forbidden, discord.HTTPException):
                    message = None
            
            # Si aucun message n'existe ou n'a pu √™tre r√©cup√©r√©, en cr√©er un nouveau
            if not message:
                message = await roles_channel.send(embed=embed)
                logger.info(f"Nouveau message de r√¥les-r√©action cr√©√© pour la cat√©gorie {category}")
                
                # Sauvegarder l'ID du message
                if category not in self.role_message_ids:
                    self.role_message_ids[category] = {}
                self.role_message_ids[category]['message_id'] = str(message.id)
                self.save_role_messages()
            
            # Ajouter les r√©actions
            for emoji in roles.keys():
                await message.add_reaction(emoji)
                await asyncio.sleep(0.5)  # Petite pause pour √©viter le rate limiting
        
        await ctx.send("‚úÖ Configuration des r√¥les-r√©action termin√©e !")
        await ctx.send(f"üëâ Les membres peuvent d√©sormais choisir leurs r√¥les dans {roles_channel.mention}")

async def setup(bot):
    """Installation du cog de gestion des r√¥les."""
    await bot.add_cog(Roles(bot))
    logger.info("Cog 'roles' charg√© avec succ√®s")