"""
Module de gestion des niveaux pour le Bot Chii.
Ce module permet aux membres de gagner de l'XP et des niveaux avec un syst√®me de r√¥les automatique.
"""

import json
import logging
import math
import os
import discord
from discord.ext import commands
import config

# Configurer le logger
logger = logging.getLogger('ninis_bot')

# Noms de r√¥les et niveaux associ√©s
LEVEL_ROLES = {
    1: "Nini Nouveau",
    5: "Nini Curieux",
    10: "Nini Actif",
    20: "Nini Confirm√©",
    30: "Nini L√©gende"
}

def xp_for_level(level):
    """Calcule l'XP n√©cessaire pour atteindre un niveau sp√©cifique."""
    return 5 * (level ** 2) + 50 * level + 100

def calculate_level(xp):
    """Calcule le niveau √† partir de l'XP totale."""
    # √âquation quadratique inverse de xp_for_level
    # level = (-50 + sqrt(2500 + 20*(xp - 100))) / 10
    discriminant = 2500 + 20 * (xp - 100)
    if discriminant < 0:
        return 0
    
    level = (-50 + math.sqrt(discriminant)) / 10
    return math.floor(level)

class Levels(commands.Cog):
    """Syst√®me de niveaux et d'XP pour les membres du serveur."""
    
    def __init__(self, bot):
        self.bot = bot
        self.data_file = 'levels_data.json'
        self.levels_data = {}
        self.xp_cooldowns = {}
        self.load_levels_data()
        logger.info("Module de niveaux initialis√©")
    
    def load_levels_data(self):
        """Charge les donn√©es de niveaux depuis le fichier JSON."""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.levels_data = json.load(f)
                    logger.info(f"Donn√©es de niveaux charg√©es pour {len(self.levels_data)} utilisateurs")
            except Exception as e:
                logger.error(f"Erreur lors du chargement des donn√©es de niveaux: {e}")
                self.levels_data = {}
        else:
            logger.info("Aucun fichier de donn√©es de niveaux trouv√©, cr√©ation d'un nouveau")
            self.levels_data = {}
            self.save_levels_data()
    
    def save_levels_data(self):
        """Sauvegarde les donn√©es de niveaux dans le fichier JSON."""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.levels_data, f, indent=4)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des donn√©es de niveaux: {e}")
    
    @commands.Cog.listener()
    async def on_message(self, message):
        """G√®re l'attribution d'XP √† chaque message."""
        # Ignore les messages de bots et les commandes
        if message.author.bot or message.content.startswith(config.PREFIX):
            return
        
        # Ignore les messages en DM
        if not message.guild:
            return
        
        # V√©rifier le cooldown (60 secondes entre chaque gain d'XP)
        user_id = str(message.author.id)
        guild_id = str(message.guild.id)
        
        # Structure de donn√©es: {guild_id: {user_id: {"xp": int, "level": int, "last_message": timestamp}}}
        if guild_id not in self.levels_data:
            self.levels_data[guild_id] = {}
        
        if user_id not in self.levels_data[guild_id]:
            self.levels_data[guild_id][user_id] = {"xp": 0, "level": 0}
        
        # Cooldown de 60 secondes pour l'XP
        import time
        current_time = time.time()
        cooldown_key = f"{guild_id}:{user_id}"
        
        if cooldown_key in self.xp_cooldowns:
            if current_time - self.xp_cooldowns[cooldown_key] < 60:
                return
        
        # Ajouter de l'XP (entre 15 et 25 par message)
        import random
        xp_gain = random.randint(15, 25)
        old_xp = self.levels_data[guild_id][user_id].get("xp", 0)
        new_xp = old_xp + xp_gain
        
        # Mettre √† jour l'XP de l'utilisateur
        self.levels_data[guild_id][user_id]["xp"] = new_xp
        
        # Calculer le nouveau niveau
        old_level = calculate_level(old_xp)
        new_level = calculate_level(new_xp)
        
        # Mettre √† jour le cooldown
        self.xp_cooldowns[cooldown_key] = current_time
        
        # V√©rifier si l'utilisateur a gagn√© un niveau
        if new_level > old_level:
            self.levels_data[guild_id][user_id]["level"] = new_level
            
            # Mettre √† jour les r√¥les et envoyer une notification
            await self.update_level_role(message.author, new_level, message.guild)
            await self.send_level_up_notification(message.author, new_level, message.guild)
        
        # Sauvegarder les donn√©es tous les 10 messages (pour √©viter les sauvegardes trop fr√©quentes)
        if random.randint(1, 10) == 1:
            self.save_levels_data()
    
    async def update_level_role(self, member, new_level, guild):
        """Met √† jour le r√¥le du membre en fonction de son niveau."""
        # Trouver le r√¥le de niveau le plus √©lev√© que le membre devrait avoir
        highest_role_level = 0
        for level, role_name in LEVEL_ROLES.items():
            if new_level >= level and level > highest_role_level:
                highest_role_level = level
        
        if highest_role_level == 0:
            return
        
        target_role_name = LEVEL_ROLES[highest_role_level]
        target_role = discord.utils.get(guild.roles, name=target_role_name)
        
        if not target_role:
            logger.warning(f"Le r√¥le {target_role_name} n'existe pas sur le serveur {guild.name}")
            return
        
        # Supprimer tous les r√¥les de niveau pr√©c√©dents
        roles_to_remove = []
        for level_role_name in LEVEL_ROLES.values():
            if level_role_name != target_role_name:  # On garde uniquement le r√¥le cible
                role = discord.utils.get(guild.roles, name=level_role_name)
                if role and role in member.roles:
                    roles_to_remove.append(role)
        
        if roles_to_remove:
            try:
                await member.remove_roles(*roles_to_remove, reason="Mise √† jour du r√¥le de niveau")
                logger.info(f"R√¥les de niveau retir√©s pour {member.name}: {', '.join(r.name for r in roles_to_remove)}")
            except Exception as e:
                logger.error(f"Erreur lors de la suppression des r√¥les de niveau pour {member.name}: {e}")
        
        # Ajouter le nouveau r√¥le si n√©cessaire
        if target_role not in member.roles:
            try:
                await member.add_roles(target_role, reason="Nouveau niveau atteint")
                logger.info(f"{member.name} a re√ßu le r√¥le {target_role.name} pour le niveau {new_level}")
            except Exception as e:
                logger.error(f"Erreur lors de l'ajout du r√¥le {target_role.name} √† {member.name}: {e}")
    
    async def send_level_up_notification(self, member, new_level, guild):
        """Envoie une notification dans le salon appropri√© quand un membre monte de niveau."""
        # Utiliser le salon sp√©cifi√© par l'ID
        levels_channel = guild.get_channel(1354525332530659589)
        
        if not levels_channel:
            logger.warning(f"Salon de notifications de niveau introuvable pour {member.name}")
            return
        
        # Cr√©er un embed adapt√© au niveau
        embed = discord.Embed(
            title="Niveau sup√©rieur ! üåü",
            description=f"F√©licitations {member.mention} ! Tu as atteint le niveau **{new_level}** !",
            color=0xffaadd
        )
        
        # Personnaliser l'embed en fonction du palier de niveau
        if new_level == 1:
            embed.add_field(
                name="R√¥le obtenu",
                value="Tu obtiens le r√¥le **Nini Nouveau** ! Bienvenue dans l'aventure ‚ú®",
                inline=False
            )
        elif new_level == 5:
            embed.add_field(
                name="R√¥le obtenu",
                value="Tu obtiens le r√¥le **Nini Curieux** ! Continue comme √ßa ! üå∏",
                inline=False
            )
        elif new_level == 10:
            embed.add_field(
                name="R√¥le obtenu",
                value="Tu obtiens le r√¥le **Nini Actif** ! Tu es d√©sormais un membre actif de notre communaut√© ! üéÄ",
                inline=False
            )
        elif new_level == 20:
            embed.add_field(
                name="R√¥le obtenu",
                value="Tu obtiens le r√¥le **Nini Confirm√©** ! Quelle progression impressionnante ! üåà",
                inline=False
            )
        elif new_level == 30:
            embed.add_field(
                name="R√¥le obtenu",
                value="Tu obtiens le r√¥le **Nini L√©gende** ! Tu es une l√©gende de notre serveur ! üëë",
                inline=False
            )
        
        # Ajouter des informations sur le prochain niveau si ce n'est pas le niveau max
        if new_level < 30:
            next_level = new_level + 1
            next_milestone = next((lvl for lvl in sorted(LEVEL_ROLES.keys()) if lvl > new_level), None)
            
            if next_milestone:
                xp_needed = xp_for_level(next_milestone) - self.levels_data[str(guild.id)][str(member.id)]["xp"]
                embed.add_field(
                    name="Prochain palier",
                    value=f"Il te faut **{xp_needed}** XP pour atteindre le r√¥le **{LEVEL_ROLES[next_milestone]}** (niveau {next_milestone}) !",
                    inline=False
                )
            else:
                xp_current = self.levels_data[str(guild.id)][str(member.id)]["xp"]
                xp_next = xp_for_level(next_level)
                xp_needed = xp_next - xp_current
                
                embed.add_field(
                    name="Prochain niveau",
                    value=f"Il te faut **{xp_needed}** XP pour atteindre le niveau {next_level} !",
                    inline=False
                )
        
        embed.set_footer(text="‚ú® Syst√®me d'XP de Ninis ‚ú®")
        
        try:
            await levels_channel.send(embed=embed)
            logger.info(f"Notification de niveau envoy√©e pour {member.name} (niveau {new_level})")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la notification de niveau pour {member.name}: {e}")
    
    @commands.command(aliases=["niveau", "level"])
    async def rank(self, ctx, member: discord.Member = None):
        """Affiche les informations de niveau d'un membre.
        
        Args:
            member: Le membre dont on veut voir le niveau. Si non sp√©cifi√©, affiche le niveau de l'auteur de la commande.
        """
        if not member:
            member = ctx.author
        
        guild_id = str(ctx.guild.id)
        user_id = str(member.id)
        
        if guild_id not in self.levels_data or user_id not in self.levels_data[guild_id]:
            embed = discord.Embed(
                title="Niveau",
                description=f"{member.mention} n'a pas encore gagn√© d'XP sur ce serveur.",
                color=0xffaadd
            )
            await ctx.send(embed=embed)
            return
        
        # R√©cup√©rer les donn√©es de l'utilisateur
        user_data = self.levels_data[guild_id][user_id]
        xp = user_data.get("xp", 0)
        level = calculate_level(xp)
        
        # Calculer les XP n√©cessaires pour le prochain niveau
        next_level = level + 1
        xp_for_next = xp_for_level(next_level)
        xp_for_current = xp_for_level(level)
        xp_progress = xp - xp_for_current
        xp_required = xp_for_next - xp_for_current
        progress_percentage = min(100, round((xp_progress / xp_required) * 100, 1))
        
        # Cr√©er la barre de progression
        progress_bar = ""
        filled_blocks = round(progress_percentage / 10)
        for i in range(10):
            if i < filled_blocks:
                progress_bar += "‚ñ†"
            else:
                progress_bar += "‚ñ°"
        
        # D√©terminer le rang de l'utilisateur dans le classement du serveur
        all_users = self.levels_data[guild_id].items()
        sorted_users = sorted(all_users, key=lambda x: x[1].get("xp", 0), reverse=True)
        user_rank = next((i+1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), 0)
        
        # Cr√©er l'embed
        embed = discord.Embed(
            title=f"Niveau de {member.display_name}",
            color=0xffaadd
        )
        
        # Avatar de l'utilisateur
        embed.set_thumbnail(url=member.display_avatar.url)
        
        # Informations principales
        embed.add_field(
            name="üåü Niveau",
            value=f"**{level}**",
            inline=True
        )
        
        embed.add_field(
            name="‚ú® XP totale",
            value=f"**{xp}** points",
            inline=True
        )
        
        embed.add_field(
            name="üèÜ Rang",
            value=f"**#{user_rank}**",
            inline=True
        )
        
        # Progression vers le prochain niveau
        embed.add_field(
            name=f"Progression vers le niveau {next_level}",
            value=f"{progress_bar} {progress_percentage}%\n{xp_progress}/{xp_required} XP",
            inline=False
        )
        
        # R√¥le actuel et prochain r√¥le
        current_role_level = max((lvl for lvl in LEVEL_ROLES.keys() if level >= lvl), default=0)
        next_role_level = next((lvl for lvl in sorted(LEVEL_ROLES.keys()) if lvl > level), None)
        
        if current_role_level > 0:
            current_role_name = LEVEL_ROLES[current_role_level]
            embed.add_field(
                name="üèÖ R√¥le actuel",
                value=f"**{current_role_name}**",
                inline=True
            )
        else:
            embed.add_field(
                name="üèÖ R√¥le actuel",
                value="Aucun r√¥le de niveau encore",
                inline=True
            )
        
        if next_role_level:
            next_role_name = LEVEL_ROLES[next_role_level]
            xp_for_next_role = xp_for_level(next_role_level)
            xp_needed = xp_for_next_role - xp
            embed.add_field(
                name="üéØ Prochain r√¥le",
                value=f"**{next_role_name}** (Niveau {next_role_level})\nPlus que **{xp_needed}** XP !",
                inline=True
            )
        else:
            embed.add_field(
                name="üéØ Prochain r√¥le",
                value="Tu as atteint le r√¥le maximum ! üëë",
                inline=True
            )
        
        embed.set_footer(text="üí¨ Gagne de l'XP en discutant sur le serveur !")
        
        await ctx.send(embed=embed)
    
    @commands.command(aliases=["top", "classement"])
    async def leaderboard(self, ctx):
        """Affiche le classement des membres les plus actifs."""
        guild_id = str(ctx.guild.id)
        
        if guild_id not in self.levels_data or not self.levels_data[guild_id]:
            await ctx.send("Aucune donn√©e de niveau n'est disponible pour ce serveur.")
            return
        
        # Trier les utilisateurs par XP
        all_users = self.levels_data[guild_id].items()
        sorted_users = sorted(all_users, key=lambda x: x[1].get("xp", 0), reverse=True)
        
        # Limiter √† 10 utilisateurs
        top_users = sorted_users[:10]
        
        # Cr√©er l'embed
        embed = discord.Embed(
            title="üèÜ Classement des membres les plus actifs",
            description="Les membres ayant le plus d'exp√©rience sur le serveur",
            color=0xffaadd
        )
        
        # G√©n√©rer la liste des utilisateurs
        leaderboard_text = ""
        for i, (user_id, user_data) in enumerate(top_users):
            # Obtenir l'utilisateur depuis l'ID
            member = ctx.guild.get_member(int(user_id))
            
            if not member:
                # L'utilisateur n'est plus sur le serveur, l'ignorer
                continue
            
            # Calculer le niveau et obtenir l'XP
            xp = user_data.get("xp", 0)
            level = calculate_level(xp)
            
            # Emoji pour les 3 premiers
            medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"**{i+1}.**"
            
            leaderboard_text += f"{medal} **{member.display_name}** ‚Ä¢ Niveau {level} ‚Ä¢ {xp} XP\n"
        
        if not leaderboard_text:
            leaderboard_text = "Aucun membre actif trouv√©."
        
        embed.description = leaderboard_text
        
        # Ajouter des informations sur les r√©compenses
        embed.add_field(
            name="üåü R√¥les de niveau",
            value=(
                "‚Ä¢ **Nini Nouveau** ‚Äî Niveau 1\n"
                "‚Ä¢ **Nini Curieux** ‚Äî Niveau 5\n"
                "‚Ä¢ **Nini Actif** ‚Äî Niveau 10\n"
                "‚Ä¢ **Nini Confirm√©** ‚Äî Niveau 20\n"
                "‚Ä¢ **Nini L√©gende** ‚Äî Niveau 30"
            ),
            inline=False
        )
        
        embed.set_footer(text="‚ú® Gagne de l'XP en discutant sur le serveur ! ‚ú®")
        
        await ctx.send(embed=embed)
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def reset_xp(self, ctx, member: discord.Member = None):
        """R√©initialise l'XP d'un membre (Admin uniquement).
        
        Args:
            member: Le membre dont l'XP doit √™tre r√©initialis√©e. Si non sp√©cifi√©, une confirmation sera demand√©e.
        """
        if not member:
            await ctx.send("‚ö†Ô∏è Cette commande r√©initialise l'XP d'un membre. Sp√©cifiez un membre avec `!reset_xp @membre`.")
            return
        
        guild_id = str(ctx.guild.id)
        user_id = str(member.id)
        
        if guild_id in self.levels_data and user_id in self.levels_data[guild_id]:
            # Retirer tous les r√¥les de niveau
            roles_to_remove = []
            for role_name in LEVEL_ROLES.values():
                role = discord.utils.get(ctx.guild.roles, name=role_name)
                if role and role in member.roles:
                    roles_to_remove.append(role)
            
            if roles_to_remove:
                try:
                    await member.remove_roles(*roles_to_remove, reason="R√©initialisation de l'XP")
                except Exception as e:
                    logger.error(f"Erreur lors de la suppression des r√¥les de niveau pour {member.name}: {e}")
            
            # R√©initialiser l'XP
            self.levels_data[guild_id][user_id] = {"xp": 0, "level": 0}
            self.save_levels_data()
            
            await ctx.send(f"‚úÖ L'XP de {member.mention} a √©t√© r√©initialis√©e √† 0.")
            logger.info(f"XP r√©initialis√©e pour {member.name} par {ctx.author.name}")
        else:
            await ctx.send(f"{member.mention} n'a pas d'XP enregistr√©e sur ce serveur.")
    
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_levels(self, ctx):
        """Cr√©e ou v√©rifie les r√¥les de niveau sur le serveur (Admin uniquement)."""
        guild = ctx.guild
        
        # Message d'initialisation
        status_message = await ctx.send("‚è≥ Configuration des r√¥les de niveau...")
        
        # Cr√©er les r√¥les de niveau
        roles_created = []
        roles_updated = []
        roles_failed = []
        
        for level, role_name in LEVEL_ROLES.items():
            # Couleur en fonction du niveau (du bleu clair au bleu fonc√©)
            if level == 1:
                color = 0xAED6F1  # Bleu tr√®s clair
            elif level == 5:
                color = 0x85C1E9  # Bleu clair
            elif level == 10:
                color = 0x5DADE2  # Bleu moyen
            elif level == 20:
                color = 0x3498DB  # Bleu
            elif level == 30:
                color = 0x2874A6  # Bleu fonc√©
            else:
                color = 0x3498DB  # Bleu par d√©faut
            
            # V√©rifier si le r√¥le existe d√©j√†
            existing_role = discord.utils.get(guild.roles, name=role_name)
            
            if existing_role:
                # Mettre √† jour le r√¥le existant
                try:
                    await existing_role.edit(
                        colour=discord.Colour(color),
                        hoist=True,
                        mentionable=False,
                        reason="Mise √† jour des r√¥les de niveau"
                    )
                    roles_updated.append(f"‚úÖ **{role_name}** (Niveau {level}, mis √† jour)")
                except Exception as e:
                    logger.error(f"Erreur lors de la mise √† jour du r√¥le '{role_name}': {e}")
                    roles_failed.append(f"‚ùå **{role_name}** (Niveau {level}, erreur: {e})")
            else:
                # Cr√©er le nouveau r√¥le
                try:
                    permissions = discord.Permissions()
                    # R√¥le normal avec permissions de base
                    permissions.update(
                        read_messages=True,
                        send_messages=True,
                        read_message_history=True,
                        add_reactions=True,
                        connect=True,
                        speak=True
                    )
                    
                    new_role = await guild.create_role(
                        name=role_name,
                        colour=discord.Colour(color),
                        permissions=permissions,
                        hoist=True,
                        mentionable=False,
                        reason="Cr√©ation des r√¥les de niveau"
                    )
                    roles_created.append(f"‚úÖ **{role_name}** (Niveau {level}, cr√©√©)")
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation du r√¥le '{role_name}': {e}")
                    roles_failed.append(f"‚ùå **{role_name}** (Niveau {level}, erreur: {e})")
        
        # Mettre √† jour le message de statut
        await status_message.edit(content="‚úÖ Configuration des r√¥les de niveau termin√©e !")
        
        # Cr√©er un embed pour afficher les r√©sultats
        embed = discord.Embed(
            title="üîß Configuration des R√¥les de Niveau",
            description="R√©sultat de la cr√©ation des r√¥les de niveau pour le syst√®me d'XP",
            color=0xffaadd
        )
        
        if roles_created:
            embed.add_field(
                name="R√¥les cr√©√©s",
                value="\n".join(roles_created),
                inline=False
            )
        
        if roles_updated:
            embed.add_field(
                name="R√¥les mis √† jour",
                value="\n".join(roles_updated),
                inline=False
            )
        
        if roles_failed:
            embed.add_field(
                name="Erreurs",
                value="\n".join(roles_failed),
                inline=False
            )
        
        # Ajouter des instructions
        embed.add_field(
            name="üìã Syst√®me d'XP",
            value=(
                "Les membres gagnent automatiquement de l'XP en discutant sur le serveur.\n"
                "‚Ä¢ Le gain d'XP est de 15-25 points par message\n"
                "‚Ä¢ Un d√©lai de 60 secondes entre chaque gain d'XP\n"
                "‚Ä¢ Les r√¥les sont attribu√©s automatiquement aux niveaux 1, 5, 10, 20 et 30\n"
                "‚Ä¢ Les membres peuvent voir leur niveau avec `!rank`\n"
                "‚Ä¢ Le classement est disponible avec `!leaderboard`"
            ),
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(aliases=["tableau", "stats"])
    async def dashboard(self, ctx):
        """Affiche le top 10 des membres avec le plus d'XP."""
        guild_id = str(ctx.guild.id)
        
        if guild_id not in self.levels_data:
            await ctx.send("Aucune donn√©e de niveau n'est disponible pour ce serveur.")
            return
        
        # Trier les membres par XP
        sorted_members = sorted(
            self.levels_data[guild_id].items(),
            key=lambda x: x[1].get("xp", 0),
            reverse=True
        )[:10]  # Prendre les 10 premiers
        
        embed = discord.Embed(
            title="üèÜ Top 10 des Membres",
            description="Les membres avec le plus d'XP sur le serveur",
            color=0xffaadd
        )
        
        for rank, (member_id, data) in enumerate(sorted_members, 1):
            member = ctx.guild.get_member(int(member_id))
            if member:
                xp = data.get("xp", 0)
                level = calculate_level(xp)
                
                # Emoji pour les 3 premiers
                rank_emoji = "üëë" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else f"**{rank}.**"
                
                embed.add_field(
                    name=f"{rank_emoji} {member.display_name}",
                    value=f"Niveau: **{level}**\nXP: **{xp:,}**",
                    inline=False
                )
        
        await ctx.send(embed=embed)

    @commands.command(aliases=["aide_niveaux", "aide_xp", "xp_help"])
    async def help_levels(self, ctx):
        """Affiche l'aide pour le syst√®me de niveaux."""
        embed = discord.Embed(
            title="üåü Syst√®me de Niveaux et XP",
            description="Guide du syst√®me d'exp√©rience et de niveaux sur le serveur",
            color=0xffaadd
        )
        
        embed.add_field(
            name="üî∞ Comment gagner de l'XP",
            value=(
                "‚Ä¢ Envoyer des messages dans le serveur (15-25 XP par message)\n"
                "‚Ä¢ L'XP est attribu√©e une fois toutes les 60 secondes\n"
                "‚Ä¢ Les commandes et les messages de bots ne donnent pas d'XP"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìä Commandes",
            value=(
                "‚Ä¢ `!rank` - Voir ton niveau, XP et progression\n"
                "‚Ä¢ `!rank @membre` - Voir le niveau d'un autre membre\n"
                "‚Ä¢ `!leaderboard` - Voir le classement des membres les plus actifs"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üèÖ R√¥les de niveau",
            value=(
                "Les r√¥les sont automatiquement attribu√©s quand tu atteins certains niveaux:\n"
                "‚Ä¢ **Nini Nouveau** ‚Äî Niveau 1\n"
                "‚Ä¢ **Nini Curieux** ‚Äî Niveau 5\n"
                "‚Ä¢ **Nini Actif** ‚Äî Niveau 10\n"
                "‚Ä¢ **Nini Confirm√©** ‚Äî Niveau 20\n"
                "‚Ä¢ **Nini L√©gende** ‚Äî Niveau 30"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìà Progression",
            value=(
                "‚Ä¢ Chaque niveau demande de plus en plus d'XP\n"
                "‚Ä¢ La formule est: `XP = 5 √ó (niveau¬≤) + 50 √ó niveau + 100`\n"
                "‚Ä¢ Exemple: Niveau 5 = 425 XP, Niveau 10 = 1100 XP"
            ),
            inline=False
        )
        
        embed.set_footer(text="‚ú® Reste actif et monte en niveau ! ‚ú®")
        
        await ctx.send(embed=embed)

async def setup(bot):
    """Fonction d'installation du cog."""
    await bot.add_cog(Levels(bot))