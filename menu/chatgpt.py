"""
Module ChatGPT pour le Bot Chii.
Ce module permet aux membres du serveur d'interagir avec ChatGPT via l'API OpenAI.
"""
import os
import logging
import discord
from discord.ext import commands
import openai
from openai import OpenAI

# Configuration du logger
logger = logging.getLogger('chii_bot')

class ChatGPT(commands.Cog):
    """Commandes pour interagir avec ChatGPT."""

    def __init__(self, bot):
        self.bot = bot
        # Initialiser l'API OpenAI avec la cl√© API depuis les variables d'environnement
        self.openai_api_key = os.environ.get("OPENAI_API_KEY")
        if not self.openai_api_key:
            logger.error("Cl√© API OpenAI non trouv√©e dans les variables d'environnement.")
            raise ValueError("OPENAI_API_KEY non d√©finie")
        
        # Log uniquement les premiers caract√®res de la cl√© pour v√©rification (ne pas logger toute la cl√©)
        logger.info(f"Utilisation de la cl√© API OpenAI commen√ßant par: {self.openai_api_key[:10]}...")
            
        self.client = OpenAI(api_key=self.openai_api_key)
        logger.info("Module ChatGPT initialis√© avec succ√®s avec le mod√®le gpt-4o-mini")

    @commands.command()
    async def ask(self, ctx, *, question=None):
        """Pose une question √† ChatGPT.
        
        Args:
            question: La question √† poser √† ChatGPT.
        """
        # V√©rifier si une question a √©t√© fournie
        if not question:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Tu dois poser une question ! Usage: `!ask <question>`",
                color=discord.Colour.red()
            )
            await ctx.send(embed=embed)
            return

        # Envoyer un message indiquant que le bot r√©fl√©chit
        thinking_message = await ctx.send("ü§î Je r√©fl√©chis √† ta question...")

        try:
            # Appeler l'API OpenAI avec le mod√®le gpt-4o-mini
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                store=True,
                messages=[
                    {"role": "system", "content": "Tu es un assistant utile, pr√©cis et amical qui r√©pond aux questions dans un serveur Discord. Garde tes r√©ponses concises, moins de 1500 caract√®res si possible."},
                    {"role": "user", "content": question}
                ],
                max_tokens=800,  # Limite le nombre de tokens pour garder la r√©ponse courte
                temperature=0.7  # Contr√¥le la cr√©ativit√© (0.7 est un bon √©quilibre)
            )
            
            # R√©cup√©rer la r√©ponse
            answer = response.choices[0].message.content.strip()
            
            # Limiter la r√©ponse √† 2000 caract√®res pour √©viter les erreurs Discord
            if len(answer) > 2000:
                logger.info(f"R√©ponse tronqu√©e de {len(answer)} √† 2000 caract√®res")
                answer = answer[:1997] + "..."
            
            # Cr√©er un embed pour la r√©ponse
            embed = discord.Embed(
                title=f"üìù R√©ponse √†: {question[:100] + '...' if len(question) > 100 else question}",
                description=answer,
                color=discord.Colour.blue()
            )
            
            # Ajouter des informations suppl√©mentaires
            embed.set_footer(text=f"Demand√© par {ctx.author.display_name} ‚Ä¢ Propuls√© par GPT-4o-mini")
            
            # Envoyer la r√©ponse
            await thinking_message.delete()
            await ctx.send(embed=embed)
            
            # Journaliser l'utilisation
            logger.info(f"Commande ChatGPT utilis√©e par {ctx.author} - Question: {question[:50]}...")
            
        except Exception as e:
            # G√©rer les erreurs
            logger.error(f"Erreur lors de l'appel √† l'API OpenAI: {e}")
            
            await thinking_message.delete()
            
            # Gestion des erreurs plus sp√©cifiques pour OpenAI
            error_message = str(e)
            
            if "insufficient_quota" in error_message:
                error_description = "Le quota d'utilisation de l'API OpenAI est √©puis√©. Contactez l'administrateur du bot pour recharger les cr√©dits."
            elif "rate_limit_exceeded" in error_message:
                error_description = "Trop de demandes ont √©t√© envoy√©es √† OpenAI. Veuillez r√©essayer dans quelques minutes."
            elif "maximum context length" in error_message or "max_tokens" in error_message:
                error_description = "La question est trop longue. Essayez de la reformuler plus bri√®vement."
            else:
                error_description = f"Je n'ai pas pu obtenir une r√©ponse de ChatGPT.\nErreur: {str(e)[:100]}..."
                
            error_embed = discord.Embed(
                title="‚ùå Erreur avec ChatGPT",
                description=error_description,
                color=discord.Colour.red()
            )
            
            # Ajouter un lien vers la documentation OpenAI
            if "insufficient_quota" in error_message:
                error_embed.add_field(
                    name="Solution",
                    value="L'administrateur doit v√©rifier le compte OpenAI pour recharger les cr√©dits ou mettre √† jour le plan de facturation.",
                    inline=False
                )
                
            await ctx.send(embed=error_embed)

async def setup(bot):
    """Fonction d'installation du cog."""
    await bot.add_cog(ChatGPT(bot))