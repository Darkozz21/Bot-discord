"""
Module de logging avanc√© pour le Bot Ninis.
Ce module enregistre les √©v√©nements importants du serveur dans un canal d√©di√©.
"""
import discord
import logging
import asyncio
import json
import os
from datetime import datetime, timedelta, timezone
from discord.ext import commands

# Configuration du logger
logger = logging.getLogger('ninis_bot')

class Logging(commands.Cog):
    """Module de logging avanc√© pour le serveur."""
    
    def __init__(self, bot):
        self.bot = bot
        self.logs_channels = {}  # {guild_id: channel_id}
        
    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setup_logs(self, ctx):
        """Configure un syst√®me de logs avanc√© pour le serveur."""
        guild = ctx.guild
        
        # V√©rifier si un canal de logs existe d√©j√†
        existing_logs = discord.utils.get(guild.text_channels, name="logs-serveur")
        
        if existing_logs:
            self.logs_channels[guild.id] = existing_logs.id
            await ctx.send(f"‚úÖ Le canal de logs existe d√©j√† : {existing_logs.mention}")
            return
        
        # Cr√©er une cat√©gorie pour les logs si elle n'existe pas
        logs_category = discord.utils.get(guild.categories, name="‚öôÔ∏è„ÉªADMINISTRATION")
        
        if not logs_category:
            try:
                # D√©finir les permissions pour la cat√©gorie
                overwrites = {
                    guild.default_role: discord.PermissionOverwrite(read_messages=False),
                    guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
                }
                
                # Ajouter des permissions pour les r√¥les d'administration
                for role_name in ["Owner", "Administrateur", "Admin", "Mod√©rateur", "Modo", "Staff"]:
                    role = discord.utils.get(guild.roles, name=role_name)
                    if role:
                        overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
                
                logs_category = await guild.create_category(
                    name="‚öôÔ∏è„ÉªADMINISTRATION",
                    overwrites=overwrites,
                    reason="Cr√©ation de la cat√©gorie d'administration pour les logs"
                )
                
                await ctx.send(f"‚úÖ Cat√©gorie `{logs_category.name}` cr√©√©e.")
                
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation de la cat√©gorie de logs: {e}")
                await ctx.send(f"‚ùå Erreur lors de la cr√©ation de la cat√©gorie: {e}")
                return
        
        # Cr√©er le canal de logs
        try:
            logs_channel = await guild.create_text_channel(
                name="logs-serveur",
                category=logs_category,
                topic="Journal des √©v√©nements importants du serveur",
                reason="Configuration du syst√®me de logs"
            )
            
            # Enregistrer le canal
            self.logs_channels[guild.id] = logs_channel.id
            
            # Message de confirmation
            embed = discord.Embed(
                title="‚úÖ Syst√®me de logs configur√©",
                description=f"Le canal {logs_channel.mention} a √©t√© cr√©√© pour les logs du serveur.",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="√âv√©nements enregistr√©s",
                value=(
                    "‚Ä¢ Arriv√©e et d√©part de membres\n"
                    "‚Ä¢ Cr√©ation et suppression de canaux\n"
                    "‚Ä¢ Modification de r√¥les\n"
                    "‚Ä¢ Messages supprim√©s\n"
                    "‚Ä¢ Messages modifi√©s\n"
                    "‚Ä¢ √âv√©nements de mod√©ration"
                ),
                inline=False
            )
            
            await ctx.send(embed=embed)
            
            # Message initial dans le canal de logs
            initial_embed = discord.Embed(
                title="üìù Logs Serveur Activ√©s",
                description="Ce canal enregistrera les √©v√©nements importants du serveur.",
                color=discord.Color.blue(),
                timestamp=datetime.now(timezone.utc)
            )
            
            initial_embed.set_footer(text=f"Ninis Bot ‚Ä¢ Logs")
            await logs_channel.send(embed=initial_embed)
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du canal de logs: {e}")
            await ctx.send(f"‚ùå Erreur lors de la cr√©ation du canal de logs: {e}")
    
    async def get_logs_channel(self, guild):
        """R√©cup√®re le canal de logs pour un serveur."""
        # V√©rifier si on conna√Æt d√©j√† le canal
        if guild.id in self.logs_channels:
            channel = guild.get_channel(self.logs_channels[guild.id])
            if channel:
                return channel
        
        # Sinon, chercher le canal par son nom
        channel = discord.utils.get(guild.text_channels, name="logs-serveur")
        if channel:
            self.logs_channels[guild.id] = channel.id
            return channel
        
        return None
    
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """Enregistre des informations d√©taill√©es quand un membre rejoint."""
        guild = member.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üëã Membre Rejoint",
            description=f"{member.mention} a rejoint le serveur.",
            color=discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # Informations de base
        embed.add_field(name="Nom", value=member.name, inline=True)
        embed.add_field(name="ID", value=member.id, inline=True)
        
        # Date de cr√©ation du compte
        created_at = member.created_at
        created_ago = (datetime.now(timezone.utc) - created_at).days
        created_text = f"<t:{int(created_at.timestamp())}:F> ({created_ago} jours)"
        embed.add_field(name="Compte cr√©√©", value=created_text, inline=False)
        
        # Alerte pour les comptes r√©cents (moins de 7 jours)
        if created_ago < 7:
            embed.add_field(
                name="‚ö†Ô∏è Compte R√©cent",
                value=f"Ce compte a √©t√© cr√©√© il y a seulement {created_ago} jours.",
                inline=False
            )
            embed.color = discord.Color.orange()
        
        # Photo de profil
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID Membre: {member.id}")
        
        # R√©cup√©ration avanc√©e des noms pr√©c√©dents via API
        try:
            previous_usernames = []
            # Cette commande r√©cup√®re les 5 derniers pseudos de l'utilisateur
            user_info = await self.bot.http.request(
                discord.http.Route("GET", f"/users/{member.id}/profile"), 
                {"with_mutual_guilds": False, "with_mutual_friends_count": False}
            )
            
            if "user_profile" in user_info and "previous_usernames" in user_info["user_profile"]:
                previous_usernames = user_info["user_profile"]["previous_usernames"]
                
            if previous_usernames:
                embed.add_field(
                    name="üìù Anciens pseudos",
                    value="\n".join(previous_usernames[:10]),  # Limiter √† 10 pseudos max
                    inline=False
                )
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des pseudos pr√©c√©dents: {e}")
            
            # Fallback sur la m√©thode par cache si l'API √©choue
            previous_names = []
            for u in self.bot.users:
                if u.id == member.id and u.name != member.name:
                    previous_names.append(u.name)
            
            if previous_names:
                embed.add_field(
                    name="üìù Anciens pseudos (cache)",
                    value="\n".join(previous_names),
                    inline=False
                )
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """Enregistre quand un membre quitte."""
        guild = member.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üëã Membre Parti",
            description=f"{member.mention} a quitt√© le serveur.",
            color=discord.Color.red(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # Informations de base
        embed.add_field(name="Nom", value=member.name, inline=True)
        embed.add_field(name="ID", value=member.id, inline=True)
        
        # Dur√©e dans le serveur
        joined_at = member.joined_at
        if joined_at:
            duration = (datetime.now(timezone.utc) - joined_at)
            days = duration.days
            hours, remainder = divmod(duration.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            duration_text = f"{days} jours, {hours} heures, {minutes} minutes"
            joined_text = f"<t:{int(joined_at.timestamp())}:F> ({duration_text})"
            embed.add_field(name="Dur√©e sur le serveur", value=joined_text, inline=False)
        
        # R√¥les du membre
        if len(member.roles) > 1:  # Ignorer @everyone
            roles_str = " ".join([role.mention for role in member.roles if role != guild.default_role])
            if roles_str:
                embed.add_field(name="R√¥les", value=roles_str, inline=False)
        
        # Photo de profil
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID Membre: {member.id}")
        
        # R√©cup√©ration avanc√©e des noms pr√©c√©dents via API
        try:
            previous_usernames = []
            # Cette commande r√©cup√®re les 5 derniers pseudos de l'utilisateur
            user_info = await self.bot.http.request(
                discord.http.Route("GET", f"/users/{member.id}/profile"), 
                {"with_mutual_guilds": False, "with_mutual_friends_count": False}
            )
            
            if "user_profile" in user_info and "previous_usernames" in user_info["user_profile"]:
                previous_usernames = user_info["user_profile"]["previous_usernames"]
                
            if previous_usernames:
                embed.add_field(
                    name="üìù Anciens pseudos",
                    value="\n".join(previous_usernames[:10]),  # Limiter √† 10 pseudos max
                    inline=False
                )
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des pseudos pr√©c√©dents: {e}")
            
            # Fallback sur la m√©thode par cache si l'API √©choue
            previous_names = []
            for u in self.bot.users:
                if u.id == member.id and u.name != member.name:
                    previous_names.append(u.name)
            
            if previous_names:
                embed.add_field(
                    name="üìù Anciens pseudos (cache)",
                    value="\n".join(previous_names),
                    inline=False
                )
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_message_delete(self, message):
        """Enregistre les messages supprim√©s."""
        # Ignorer les messages du bot
        if message.author.bot:
            return
            
        guild = message.guild
        if not guild:
            return
            
        logs_channel = await self.get_logs_channel(guild)
        if not logs_channel:
            return
            
        # Ignorer les suppressions dans le canal de logs lui-m√™me
        if message.channel.id == logs_channel.id:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üóëÔ∏è Message Supprim√©",
            color=discord.Color.red(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # Informations de base
        embed.add_field(name="Auteur", value=message.author.mention, inline=True)
        embed.add_field(name="Canal", value=message.channel.mention, inline=True)
        
        # Contenu du message
        if message.content:
            # Tronquer le contenu s'il est trop long
            content = message.content
            if len(content) > 1024:
                content = content[:1021] + "..."
            embed.add_field(name="Contenu", value=content, inline=False)
        
        # Pi√®ces jointes
        if message.attachments:
            files_text = "\n".join([f"[{a.filename}]({a.url})" for a in message.attachments])
            embed.add_field(name="Pi√®ces jointes", value=files_text, inline=False)
        
        # Ajouter une miniature de l'avatar de l'auteur
        embed.set_thumbnail(url=message.author.display_avatar.url)
        embed.set_footer(text=f"ID Message: {message.id} | ID Auteur: {message.author.id}")
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        """Enregistre les messages modifi√©s."""
        # Ignorer les messages du bot
        if before.author.bot:
            return
            
        # Ignorer si le contenu est le m√™me (ex: int√©gration mise √† jour)
        if before.content == after.content:
            return
            
        guild = before.guild
        if not guild:
            return
            
        logs_channel = await self.get_logs_channel(guild)
        if not logs_channel:
            return
            
        # Ignorer les modifications dans le canal de logs lui-m√™me
        if before.channel.id == logs_channel.id:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="‚úèÔ∏è Message Modifi√©",
            description=f"Message modifi√© dans {before.channel.mention}",
            color=discord.Color.gold(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # Informations de base
        embed.add_field(name="Auteur", value=before.author.mention, inline=True)
        embed.add_field(name="Lien", value=f"[Aller au message]({after.jump_url})", inline=True)
        
        # Contenu du message
        if before.content:
            # Tronquer le contenu s'il est trop long
            content_before = before.content
            if len(content_before) > 1024:
                content_before = content_before[:1021] + "..."
            embed.add_field(name="Avant", value=content_before, inline=False)
        
        if after.content:
            # Tronquer le contenu s'il est trop long
            content_after = after.content
            if len(content_after) > 1024:
                content_after = content_after[:1021] + "..."
            embed.add_field(name="Apr√®s", value=content_after, inline=False)
        
        # Ajouter une miniature de l'avatar de l'auteur
        embed.set_thumbnail(url=before.author.display_avatar.url)
        embed.set_footer(text=f"ID Message: {before.id} | ID Auteur: {before.author.id}")
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """Enregistre la cr√©ation de canaux."""
        guild = channel.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel or channel.id == logs_channel.id:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üìù Canal Cr√©√©",
            description=f"Le canal {channel.mention} a √©t√© cr√©√©.",
            color=discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # D√©tails du canal
        embed.add_field(name="Nom", value=channel.name, inline=True)
        embed.add_field(name="Type", value=str(channel.type).replace("_", " ").title(), inline=True)
        
        if isinstance(channel, discord.TextChannel) and channel.topic:
            embed.add_field(name="Sujet", value=channel.topic, inline=False)
        
        if channel.category:
            embed.add_field(name="Cat√©gorie", value=channel.category.name, inline=True)
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """Enregistre la suppression de canaux."""
        guild = channel.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel or channel.id == logs_channel.id:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üóëÔ∏è Canal Supprim√©",
            description=f"Le canal **{channel.name}** a √©t√© supprim√©.",
            color=discord.Color.red(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # D√©tails du canal
        embed.add_field(name="ID", value=channel.id, inline=True)
        embed.add_field(name="Type", value=str(channel.type).replace("_", " ").title(), inline=True)
        
        if channel.category:
            embed.add_field(name="Cat√©gorie", value=channel.category.name, inline=True)
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """Enregistre la cr√©ation de r√¥les."""
        guild = role.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üëë R√¥le Cr√©√©",
            description=f"Le r√¥le {role.mention} a √©t√© cr√©√©.",
            color=role.color,
            timestamp=datetime.now(timezone.utc)
        )
        
        # D√©tails du r√¥le
        embed.add_field(name="Nom", value=role.name, inline=True)
        embed.add_field(name="ID", value=role.id, inline=True)
        
        if role.permissions.value > 0:
            perms = []
            for perm, value in role.permissions:
                if value:
                    perms.append(perm.replace("_", " ").title())
            
            if perms:
                # Tronquer la liste si elle est trop longue
                perms_str = ", ".join(perms)
                if len(perms_str) > 1024:
                    perms_str = perms_str[:1021] + "..."
                embed.add_field(name="Permissions", value=perms_str, inline=False)
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """Enregistre la suppression de r√¥les."""
        guild = role.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel:
            return
        
        # Cr√©er un embed pour le log
        embed = discord.Embed(
            title="üóëÔ∏è R√¥le Supprim√©",
            description=f"Le r√¥le **{role.name}** a √©t√© supprim√©.",
            color=discord.Color.red(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # D√©tails du r√¥le
        embed.add_field(name="ID", value=role.id, inline=True)
        embed.add_field(name="Couleur", value=str(role.color), inline=True)
        
        # Envoyer l'embed
        await logs_channel.send(embed=embed)
    
    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """Enregistre les changements de r√¥les et de surnom des membres."""
        # Ignorer les mises √† jour du bot
        if before.bot:
            return
            
        guild = before.guild
        logs_channel = await self.get_logs_channel(guild)
        
        if not logs_channel:
            return
        
        # V√©rifier si les r√¥les ont chang√©
        if before.roles != after.roles:
            # D√©terminer les r√¥les ajout√©s
            added_roles = [role for role in after.roles if role not in before.roles]
            
            # D√©terminer les r√¥les retir√©s
            removed_roles = [role for role in before.roles if role not in after.roles]
            
            if added_roles or removed_roles:
                # Cr√©er un embed pour le log
                embed = discord.Embed(
                    title="üîÑ R√¥les Modifi√©s",
                    description=f"Les r√¥les de {after.mention} ont √©t√© modifi√©s.",
                    color=discord.Color.blue(),
                    timestamp=datetime.now(timezone.utc)
                )
                
                # Ajouter les d√©tails des modifications
                if added_roles:
                    roles_str = " ".join([role.mention for role in added_roles])
                    embed.add_field(name="‚úÖ R√¥les Ajout√©s", value=roles_str, inline=False)
                
                if removed_roles:
                    roles_str = " ".join([role.mention for role in removed_roles])
                    embed.add_field(name="‚ùå R√¥les Retir√©s", value=roles_str, inline=False)
                
                # Ajouter une miniature de l'avatar du membre
                embed.set_thumbnail(url=after.display_avatar.url)
                embed.set_footer(text=f"ID Membre: {after.id}")
                
                # Envoyer l'embed
                await logs_channel.send(embed=embed)
        
        # V√©rifier si le surnom a chang√©
        if before.nick != after.nick:
            # Cr√©er un embed pour le log
            embed = discord.Embed(
                title="üìù Surnom Modifi√©",
                description=f"Le surnom de {after.mention} a √©t√© modifi√©.",
                color=discord.Color.blue(),
                timestamp=datetime.now(timezone.utc)
            )
            
            # Ajouter les d√©tails des modifications
            embed.add_field(name="Avant", value=before.nick or "Aucun surnom", inline=True)
            embed.add_field(name="Apr√®s", value=after.nick or "Aucun surnom", inline=True)
            
            # Ajouter une miniature de l'avatar du membre
            embed.set_thumbnail(url=after.display_avatar.url)
            embed.set_footer(text=f"ID Membre: {after.id}")
            
            # Envoyer l'embed
            await logs_channel.send(embed=embed)

async def setup(bot):
    """Fonction d'installation du cog."""
    await bot.add_cog(Logging(bot))
    logger.info("Cog 'logging' charg√© avec succ√®s")