"""
Main file for the Chii discord bot.
This bot helps in setting up and managing the Chii community server.
"""
import os
import logging
import time
import asyncio
import discord
from discord.ext import commands
import config
from keep_alive import keep_alive

# Set up logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('chii_bot')

# Set up intents (permissions)
intents = discord.Intents.all()
bot = commands.Bot(command_prefix=config.PREFIX, intents=intents, help_command=None)

@bot.event
async def on_ready():
    """Called when the bot is ready and connected to Discord."""
    logger.info(f"Connect√© en tant que {bot.user}")

    # Set bot activity
    activity = discord.Activity(type=discord.ActivityType.listening, 
                               name=f"{config.PREFIX}help")
    await bot.change_presence(activity=activity)

    # D√©finir une variable globale pour suivre la connexion
    bot.last_heartbeat = time.time()

    # Load all cogs
    for cog in config.COGS:
        try:
            await bot.load_extension(f"cogs.{cog}")
            logger.info(f"Cog '{cog}' charg√© avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors du chargement du cog '{cog}': {e}")

    # D√©marrer la t√¢che de heartbeat pour surveiller la connexion
    if not hasattr(bot, 'heartbeat_task') or bot.heartbeat_task is None:
        bot.heartbeat_task = bot.loop.create_task(check_heartbeat())
        logger.info("T√¢che de surveillance de la connexion d√©marr√©e")

async def check_heartbeat():
    """V√©rifie r√©guli√®rement que le bot est toujours connect√© √† Discord."""
    await bot.wait_until_ready()
    while not bot.is_closed():
        try:
            # V√©rifier si le bot est toujours connect√©
            if bot.is_ws_ratelimited():
                logger.warning("Le bot est rate-limit√© par le websocket Discord")

            # Ping Discord pour v√©rifier la connexion
            latency = bot.latency * 1000
            if latency > 1000:  # Latence > 1 seconde
                logger.warning(f"Latence √©lev√©e d√©tect√©e: {latency:.2f}ms")
            else:
                logger.debug(f"Heartbeat Discord OK - Latence: {latency:.2f}ms")

            # Mettre √† jour le timestamp du dernier heartbeat
            bot.last_heartbeat = time.time()

            # Attendre 5 minutes avant la prochaine v√©rification
            await asyncio.sleep(300)
        except Exception as e:
            logger.error(f"Erreur lors du heartbeat: {e}")
            await asyncio.sleep(60)  # Attendre une minute en cas d'erreur

@bot.event
async def on_command_error(ctx, error):
    """Global error handler for command errors."""
    if isinstance(error, commands.CommandNotFound):
        return

    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu n'as pas les permissions requises pour cette commande.")
        return

    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è≥ Cette commande est en cooldown. R√©essaie dans {error.retry_after:.2f} secondes.")
        return

    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùì Argument manquant: {error.param.name}")
        return

    # Log unknown errors
    logger.error(f"Erreur de commande: {error}")
    await ctx.send(f"‚ùå Une erreur est survenue: {error}")

class HelpView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)

    @discord.ui.select(
        placeholder="Choisissez une cat√©gorie",
        options=[
            discord.SelectOption(label="Admin", emoji="üëë", value="admin"),
            discord.SelectOption(label="Mod√©ration", emoji="üõ°Ô∏è", value="mod"),
            discord.SelectOption(label="TikTok", emoji="üì±", value="tiktok"),
            discord.SelectOption(label="Musique", emoji="üéµ", value="music"),
            discord.SelectOption(label="√âv√©nements", emoji="üéâ", value="events"),
            discord.SelectOption(label="Utilitaires", emoji="üå∏", value="utils")
        ]
    )
    async def select_callback(self, interaction: discord.Interaction, select: discord.ui.Select):
        embeds = {
            "admin": discord.Embed(
                title="üëë Commandes d'administration",
                description="Commandes r√©serv√©es aux administrateurs",
                color=0xFFC0CB
            ).add_field(name="Configuration", value="\n".join([
                f"`{config.PREFIX}setup_ninis` ‚Ä¢ Config serveur",
                f"`{config.PREFIX}setup_verification` ‚Ä¢ Syst√®me v√©rif",
                f"`{config.PREFIX}update_rules` ‚Ä¢ R√®glement",
                f"`{config.PREFIX}add_role_menu` ‚Ä¢ Menu r√¥les",
                f"`{config.PREFIX}create_stats_channels` ‚Ä¢ Cr√©e stats",
                f"`{config.PREFIX}find_stats_channels` ‚Ä¢ Trouve stats",
                f"`{config.PREFIX}update_stats` ‚Ä¢ MAJ stats",
                f"`{config.PREFIX}reload_cogs` ‚Ä¢ Recharge modules"
            ])),
            "mod": discord.Embed(
                title="üõ°Ô∏è Commandes de mod√©ration",
                description="Commandes pour g√©rer le serveur",
                color=0xFFC0CB
            ).add_field(name="Mod√©ration", value="\n".join([
                f"`{config.PREFIX}clear [n]` ‚Ä¢ Supprime messages",
                f"`{config.PREFIX}kick @user` ‚Ä¢ Expulse",
                f"`{config.PREFIX}ban @user` ‚Ä¢ Bannit",
                f"`{config.PREFIX}mute/unmute @user` ‚Ä¢ Muet",
                f"`{config.PREFIX}warnings` ‚Ä¢ Avertissements"
            ])),
            "tiktok": discord.Embed(
                title="üì± Commandes TikTok",
                description="Gestion des comptes TikTok",
                color=0xFFC0CB
            ).add_field(name="TikTok", value="\n".join([
                f"`{config.PREFIX}set_tiktok @user` ‚Ä¢ Associe compte",
                f"`{config.PREFIX}remove_tiktok @user` ‚Ä¢ Retire compte",
                f"`{config.PREFIX}list_tiktok` ‚Ä¢ Liste comptes",
                f"`{config.PREFIX}check_tiktok_now` ‚Ä¢ V√©rifie mises √† jour"
            ])),
            "music": discord.Embed(
                title="üéµ Commandes musicales",
                description="Syst√®me de musique",
                color=0xFFC0CB
            ).add_field(name="Musique", value="\n".join([
                f"`{config.PREFIX}play [recherche]` ‚Ä¢ Joue musique",
                f"`{config.PREFIX}skip/pause/resume` ‚Ä¢ Contr√¥les",
                f"`{config.PREFIX}queue` ‚Ä¢ Liste d'attente",
                f"`{config.PREFIX}volume [0-100]` ‚Ä¢ Volume"
            ])),
            "events": discord.Embed(
                title="üéâ Commandes d'√©v√©nements",
                description="Gestion des √©v√©nements et giveaways",
                color=0xFFC0CB
            ).add_field(name="√âv√©nements", value="\n".join([
                f"`{config.PREFIX}gstart <temps> <nb_gagnants> <prix>` ‚Ä¢ Lance un giveaway",
                f"`{config.PREFIX}giveaway_reroll [msg_id]` ‚Ä¢ Retire un gagnant",
                f"`{config.PREFIX}setup_daily_question` ‚Ä¢ Config question du jour",
                f"`{config.PREFIX}send_question_now` ‚Ä¢ Envoie une question",
                f"`{config.PREFIX}add_question [texte]` ‚Ä¢ Ajoute question"
            ])),
            "utils": discord.Embed(
                title="üå∏ Commandes utilitaires",
                description="Outils et commandes diverses",
                color=0xFFC0CB
            ).add_field(name="Utilitaires", value="\n".join([
                f"`{config.PREFIX}add_emojis [type] [n]` ‚Ä¢ Ajoute √©mojis",
                f"`{config.PREFIX}info/serverinfo` ‚Ä¢ Infos",
                f"`{config.PREFIX}avatar @user` ‚Ä¢ Avatar",
                f"`{config.PREFIX}userinfo @user` ‚Ä¢ Infos membre",
                f"`{config.PREFIX}ask [question]` ‚Ä¢ ChatGPT"
            ]))
        }

        embed = embeds.get(select.values[0])
        embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")
        await interaction.response.edit_message(embed=embed, view=self)

@bot.command(name="help")
async def help_command(ctx):
    """Affiche l'aide interactive avec toutes les commandes."""
    is_admin = ctx.author.guild_permissions.administrator
    is_mod = ctx.author.guild_permissions.manage_messages

    class HelpView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=120)

        @discord.ui.select(
            placeholder="‚ú® Choisissez une cat√©gorie",
            options=[
                discord.SelectOption(label="üéÆ Commandes g√©n√©rales", emoji="üå∏", value="general", description="Commandes de base pour tous les membres"),
                discord.SelectOption(label="üéµ Musique", emoji="üéµ", value="music", description="Syst√®me de musique et lecteur"),
                discord.SelectOption(label="üì± TikTok", emoji="üì±", value="tiktok", description="Gestion des notifications TikTok"),
                discord.SelectOption(label="üéâ √âv√©nements", emoji="üéä", value="events", description="Giveaways et √©v√©nements"),
                discord.SelectOption(label="üí° Utilitaires", emoji="‚öôÔ∏è", value="utils", description="Commandes pratiques"),
                *([discord.SelectOption(label="üõ°Ô∏è Mod√©ration", emoji="üî®", value="mod", description="Outils de mod√©ration")] if is_mod else []),
                *([discord.SelectOption(label="‚ö° Administration", emoji="üëë", value="admin", description="Configuration du serveur")] if is_admin else [])
            ]
        )
        async def select_callback(self, interaction: discord.Interaction, select: discord.ui.Select):
            embeds = {
                "general": discord.Embed(
                    title="üéÆ Commandes g√©n√©rales",
                    description="Les commandes de base accessibles √† tous",
                    color=0xFFC0CB
                ).add_field(name="Profil", value="\n".join([
                    f"`{config.PREFIX}rank` ‚Ä¢ Voir ton niveau",
                    f"`{config.PREFIX}profile` ‚Ä¢ Afficher ton profil",
                    f"`{config.PREFIX}avatar [@user]` ‚Ä¢ Voir un avatar",
                    f"`{config.PREFIX}userinfo [@user]` ‚Ä¢ Info utilisateur"
                ])).add_field(name="Interaction", value="\n".join([
                    f"`{config.PREFIX}suggest [id√©e]` ‚Ä¢ Faire une suggestion",
                    f"`{config.PREFIX}say [texte]` ‚Ä¢ Faire parler le bot",
                    f"`{config.PREFIX}ping` ‚Ä¢ Tester la latence"
                ])),

                "music": discord.Embed(
                    title="üéµ Syst√®me musical",
                    description="Commandes pour √©couter de la musique",
                    color=0x1DB954
                ).add_field(name="Lecture", value="\n".join([
                    f"`{config.PREFIX}play [titre/URL]` ‚Ä¢ Jouer une musique",
                    f"`{config.PREFIX}pause/resume` ‚Ä¢ Pause/Reprise",
                    f"`{config.PREFIX}skip` ‚Ä¢ Passer la musique",
                    f"`{config.PREFIX}stop` ‚Ä¢ Arr√™ter la musique"
                ])).add_field(name="File d'attente", value="\n".join([
                    f"`{config.PREFIX}queue` ‚Ä¢ Voir la file d'attente",
                    f"`{config.PREFIX}clear` ‚Ä¢ Vider la file",
                    f"`{config.PREFIX}shuffle` ‚Ä¢ M√©langer la file",
                    f"`{config.PREFIX}volume [0-100]` ‚Ä¢ R√©gler le volume"
                ])),

                "tiktok": discord.Embed(
                    title="üì± Syst√®me TikTok",
                    description="Gestion des notifications TikTok",
                    color=0xFE2C55
                ).add_field(name="Configuration", value="\n".join([
                    f"`{config.PREFIX}set_tiktok @user [compte]` ‚Ä¢ Lier un compte",
                    f"`{config.PREFIX}remove_tiktok @user` ‚Ä¢ Retirer un compte",
                    f"`{config.PREFIX}list_tiktok` ‚Ä¢ Liste des comptes",
                    f"`{config.PREFIX}check_tiktok_now` ‚Ä¢ V√©rifier manuellement"
                ])),

                "events": discord.Embed(
                    title="üéâ √âv√©nements",
                    description="Gestion des √©v√©nements et giveaways",
                    color=0xFF73FA
                ).add_field(name="Giveaways", value="\n".join([
                    f"`{config.PREFIX}gstart [temps] [gagnants] [prix]` ‚Ä¢ Lancer",
                    f"`{config.PREFIX}gend [ID]` ‚Ä¢ Terminer",
                    f"`{config.PREFIX}greroll [ID]` ‚Ä¢ Retirer"
                ])).add_field(name="Questions", value="\n".join([
                    f"`{config.PREFIX}qotd` ‚Ä¢ Question du jour",
                    f"`{config.PREFIX}add_question [texte]` ‚Ä¢ Ajouter"
                ])),

                "utils": discord.Embed(
                    title="üí° Utilitaires",
                    description="Commandes utiles diverses",
                    color=0x58B9FF
                ).add_field(name="Serveur", value="\n".join([
                    f"`{config.PREFIX}serverinfo` ‚Ä¢ Info serveur",
                    f"`{config.PREFIX}members` ‚Ä¢ Liste membres",
                    f"`{config.PREFIX}roles` ‚Ä¢ Liste r√¥les"
                ])).add_field(name="Autres", value="\n".join([
                    f"`{config.PREFIX}remind [temps] [rappel]` ‚Ä¢ Rappel",
                    f"`{config.PREFIX}poll [question]` ‚Ä¢ Sondage",
                    f"`{config.PREFIX}weather [ville]` ‚Ä¢ M√©t√©o"
                ])),

                "mod": discord.Embed(
                    title="üõ°Ô∏è Mod√©ration",
                    description="Outils de mod√©ration du serveur",
                    color=0xFF5C5C
                ).add_field(name="Sanctions", value="\n".join([
                    f"`{config.PREFIX}warn @user [raison]` ‚Ä¢ Avertir",
                    f"`{config.PREFIX}kick @user [raison]` ‚Ä¢ Expulser",
                    f"`{config.PREFIX}ban @user [raison]` ‚Ä¢ Bannir",
                    f"`{config.PREFIX}mute @user [dur√©e]` ‚Ä¢ Rendre muet"
                ])).add_field(name="Gestion", value="\n".join([
                    f"`{config.PREFIX}clear [nombre]` ‚Ä¢ Supprimer messages",
                    f"`{config.PREFIX}slowmode [secondes]` ‚Ä¢ Mode lent",
                    f"`{config.PREFIX}lock/unlock` ‚Ä¢ Verrouiller salon"
                ])) if is_mod else None,

                "admin": discord.Embed(
                    title="‚ö° Administration",
                    description="Configuration avanc√©e du serveur",
                    color=0xFFD700
                ).add_field(name="Setup", value="\n".join([
                    f"`{config.PREFIX}setup_ninis` ‚Ä¢ Config serveur",
                    f"`{config.PREFIX}setup_verification` ‚Ä¢ Syst√®me v√©rif",
                    f"`{config.PREFIX}create_stats_channels` ‚Ä¢ Stats serveur"
                ])).add_field(name="Gestion", value="\n".join([
                    f"`{config.PREFIX}add_role_menu` ‚Ä¢ Menu r√¥les",
                    f"`{config.PREFIX}update_rules` ‚Ä¢ R√®glement",
                    f"`{config.PREFIX}reload_cogs` ‚Ä¢ Recharger modules"
                ])) if is_admin else None
            }

            embed = embeds.get(select.values[0])
            if embed:
                embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")
                await interaction.response.edit_message(embed=embed, view=self)

    # Message d'accueil initial
    welcome_embed = discord.Embed(
        title="‚ú¶ Íí∞ Aide du Bot Chii Íí±",
        description="Bienvenue dans le menu d'aide interactif !\n\n"
                    "S√©lectionnez une cat√©gorie dans le menu d√©roulant ci-dessous pour voir les commandes disponibles.",
        color=0xFFC0CB
    )
    welcome_embed.add_field(
        name="üî• Nouveaut√©s",
        value="‚Ä¢ Syst√®me de niveaux\n‚Ä¢ Questions du jour\n‚Ä¢ Menu de r√¥les am√©lior√©",
        inline=False
    )
    welcome_embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")
    welcome_embed.set_thumbnail(url=bot.user.display_avatar.url)

    view = HelpView()
    await ctx.send(embed=welcome_embed, view=view)

@discord.ui.select(placeholder="Choisissez une cat√©gorie")
async def select_callback(self, interaction: discord.Interaction, select: discord.ui.Select):
    embeds = {
        "basic": discord.Embed(
            title="üå∏ Commandes basiques",
            description="Commandes accessibles √† tous",
            color=0xFFC0CB
        ).add_field(name="G√©n√©ral", value="\n".join([
            f"`{config.PREFIX}help` ‚Ä¢ Affiche l'aide",
            f"`{config.PREFIX}ping` ‚Ä¢ V√©rifie la latence",
            f"`{config.PREFIX}avatar [@user]` ‚Ä¢ Montre l'avatar",
            f"`{config.PREFIX}userinfo [@user]` ‚Ä¢ Infos utilisateur",
            f"`{config.PREFIX}suggest [id√©e]` ‚Ä¢ Sugg√®re une id√©e"
        ])),

        "tiktok": discord.Embed(
            title="üì± Commandes TikTok",
            description="Gestion des notifications TikTok",
            color=0xFFC0CB
        ).add_field(name="TikTok", value="\n".join([
            f"`{config.PREFIX}list_tiktok` ‚Ä¢ Liste les comptes"
        ])),

        "music": discord.Embed(
            title="üéµ Commandes musicales",
            description="Syst√®me de musique",
            color=0xFFC0CB
        ).add_field(name="Musique", value="\n".join([
            f"`{config.PREFIX}play [recherche]` ‚Ä¢ Joue musique",
            f"`{config.PREFIX}skip/pause/resume` ‚Ä¢ Contr√¥les",
            f"`{config.PREFIX}queue` ‚Ä¢ Liste d'attente"
        ])),

        "mod": discord.Embed(
            title="üõ°Ô∏è Commandes de mod√©ration",
            description="Mod√©ration du serveur",
            color=0xFFC0CB
        ).add_field(name="Mod√©ration", value="\n".join([
            f"`{config.PREFIX}clear [n]` ‚Ä¢ Supprime messages",
            f"`{config.PREFIX}warn @user` ‚Ä¢ Avertit",
            f"`{config.PREFIX}mute/unmute @user` ‚Ä¢ Rend muet"
        ])) if is_mod else None,

        "admin": discord.Embed(
            title="üëë Commandes d'administration",
            description="Administration du serveur",
            color=0xFFC0CB
        ).add_field(name="Administration", value="\n".join([
            f"`{config.PREFIX}setup_ninis` ‚Ä¢ Config serveur",
            f"`{config.PREFIX}update_rules` ‚Ä¢ R√®glement",
            f"`{config.PREFIX}set_tiktok @user` ‚Ä¢ Config TikTok"
        ])) if is_admin else None
    }

    embed = embeds.get(select.values[0])
    if embed:
        embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")
        await interaction.response.edit_message(embed=embed, view=self)

    # Message d'accueil initial
    embed = discord.Embed(
        title="‚ú¶ Íí∞ Aide du Bot Chii Íí±",
        description="S√©lectionnez une cat√©gorie dans le menu d√©roulant ci-dessous ‚ô°",
        color=0xFFC0CB
    )
    embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")
    embed.set_thumbnail(url=bot.user.display_avatar.url)

    view = HelpView()
    await ctx.send(embed=embed, view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def reload_cogs(ctx):
    """Reload all cogs (admin only)."""
    reloaded = []
    failed = []

    for cog in config.COGS:
        try:
            await bot.reload_extension(f"cogs.{cog}")
            reloaded.append(cog)
        except Exception as e:
            failed.append(f"{cog}: {e}")
            logger.error(f"Erreur lors du rechargement du cog '{cog}': {e}")

    # Create response message
    response = "‚úÖ **Modules recharg√©s:**\n"
    response += "\n".join([f"- {cog}" for cog in reloaded])

    if failed:
        response += "\n\n‚ùå **√âchecs:**\n"
        response += "\n".join([f"- {failure}" for failure in failed])

    await ctx.send(response)

@bot.command()
async def info(ctx):
    """Display information about the bot."""
    embed = discord.Embed(
        title="‚ú¶ Íí∞ Bot Chii Íí±",
        description="Je suis le bot officiel du serveur, con√ßu pour vous aider √† g√©rer et profiter de votre communaut√© !",
        color=discord.Colour.pink()
    )

    # Bot info
    embed.add_field(name="Pr√©fixe", value=f"`{config.PREFIX}`", inline=True)
    embed.add_field(name="Version", value=config.VERSION, inline=True)
    embed.add_field(name="Serveurs", value=str(len(bot.guilds)), inline=True)

    # Add stats
    embed.add_field(name="Latence", value=f"{round(bot.latency * 1000)}ms", inline=True)

    # Add website link
    embed.add_field(name="Site Web", value=f"[Visiter le site](http://ninis.replit.app)", inline=True)

    # Set footer
    embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")

    await ctx.send(embed=embed)

@bot.command()
async def serverinfo(ctx):
    """Display information about the server."""
    guild = ctx.guild

    # Get role counts
    role_count = len(guild.roles)

    # Get channel counts
    text_channels = len(guild.text_channels)
    voice_channels = len(guild.voice_channels)
    categories = len(guild.categories)

    # Create embed
    embed = discord.Embed(
        title=f"‚ú¶ Íí∞ {guild.name} Íí±",
        description="Informations sur le serveur",
        color=discord.Colour.pink()
    )

    # Add basic info
    embed.add_field(name="ID", value=guild.id, inline=True)
    embed.add_field(name="Propri√©taire", value=guild.owner.mention, inline=True)
    embed.add_field(name="Membres", value=guild.member_count, inline=True)

    # Add channel info
    embed.add_field(name="Cat√©gories", value=categories, inline=True)
    embed.add_field(name="Salons textuels", value=text_channels, inline=True)
    embed.add_field(name="Salons vocaux", value=voice_channels, inline=True)

    # Add role info
    embed.add_field(name="R√¥les", value=role_count, inline=True)
    embed.add_field(name="Cr√©ation", value=guild.created_at.strftime("%d/%m/%Y"), inline=True)

    # Set server icon if available
    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)

    # Set footer
    embed.set_footer(text="‚úß Bot Chii ‚Ä¢ Made with üíñ")

    await ctx.send(embed=embed)

if __name__ == "__main__":
    # Start the keep_alive web server in a background thread
    keep_thread = keep_alive()

    # Get token from environment variables with fallback to config
    token = os.getenv("DISCORD_TOKEN", config.TOKEN)

    # Anti-crash system with automatic restart
    restart_count = 0
    max_restarts = 5
    retry_interval = 60  # secondes

    while True:
        try:
            logger.info(f"D√©marrage du bot (tentative #{restart_count + 1})")
            # Run the bot (this will block until the bot is closed/crashes)
            bot.run(token)

            # If we get here, the bot was closed gracefully
            logger.info("Le bot s'est arr√™t√© proprement.")
            break

        except Exception as e:
            restart_count += 1
            logger.error(f"Erreur critique: {str(e)}")

            # Note: Les red√©marrages sont g√©r√©s par le nouveau syst√®me keep_alive

            if restart_count >= max_restarts:
                logger.critical(f"Trop de red√©marrages ({max_restarts}). Arr√™t du bot.")
                break

            logger.warning(f"Red√©marrage du bot dans {retry_interval} secondes... (tentative {restart_count}/{max_restarts})")
            import time
            time.sleep(retry_interval)

            # Reconnect to Discord's gateway
            bot._ready.clear()

            # Increase retry interval for next attempt (exponential backoff)
            retry_interval = min(retry_interval * 2, 900)  # Max 15 minutes

# Cette section permet √† ce fichier d'√™tre utilis√© par Gunicorn pour le serveur web
# Importer l'application Flask depuis app.py
from app import app

# Cette variable est utilis√©e par Gunicorn
# N√©cessaire pour le workflow "Start application"